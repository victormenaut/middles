

The Design Process
An Overview
The design process is the activity of turning ideas into reality.
It is not unique to the industrial sector and not even to engineering; it occurs in such widely differing activities as the construction of a longhut in a jungle clearing and the knitting of a pullover.
EVOLUTION OF THE DESIGN PROCESS
The process in engineering evolved naturally with an increased need for the services of the craftsman or artisan.
If there is a low demand for products and plenty of time, the craftsman has no need to organize or rationalize his activities.
Events can be left to "flow" naturally.
When the blacksmith decides to make some new tongs for himself, he may just look around for suitable pieces of scrap which he will then fashion into the desired tools.
Whilst he is unquestionably performing a design activity, it is totally informal and free-ranging.
No record of the initial request is kept and the shape and style only evolves as the metal is worked.
The idea for the tongs may not even exist as a sketch; simply as a concept in the smith's mind.
It is only when quantities have to be produced and time is short that activities need to be planned.
If a number of similar tools are required then the blacksmith must draw out, if only roughly, the form of the components in order that materials can be purchased and costed.
A plan must also be drawn up to ensure that parts are made in the right order for assembly.
Whilst working alone the craftsman also has no real need to describe or control the process elements, as he contains, in his head, the understanding of how the design is intended to work and the necessary stages to make this a reality.
However, once an apprentice or assistant is taken on this is no longer true.
The assistant may not have the developed mental skills of handling conceptual relations.
He may be told to shape the component; not why the material needs shaping.
The subtleties of shape that ensure that both halves  of the tongs fit together and work, may only be apparent to the smith.
The assistant must thus be provided with detailed instructions on how this is to be achieved.
Such instructions may be communicated verbally or written.
When geometry is being described, rather than function, we find it easiest to communicate in pictures.
A sketch with a few rough dimensions may be enough for a man to trim some timber into a frame for a house.
If the desired component is a complicated part of an aircraft engine, then the drawn instructions need to be accurate and unambiguous.
For such reasons formalized drafting procedures were developed.
The Design/Production Relationship
It was really at that point that the industrial factory was born.
A separation appeared for the first time between design and production.
Thus the act of formally drafting away from the workbench has created the artificial separations that still exist today, reflected in our descriptions of CAD and CAM as different subjects.
In our attempts to draw the design activity back to a single integrated whole we have to look back to parallels close to that point of initial separation.
Bill Beeby, of Boeing Aircraft Co in the United States, in his description of their search for an integrated manufacturing system, claims that they were nearest that goal when the firm was first set up to make sports planes for their wealthy owner.
Half a dozen craftsmen and designers worked together in a single clapper-board building.
The machine tools were housed to one end, the aeroplane assembled at the other, whilst the draftsmen lived in the loft.
People, information and ideas flowed around the building.
Whilst some brought particular skills, and hence held certain responsibilities, job roles were largely undefined as all were dedicated to achieving the single objective of building that aircraft.
Such a fluid working arrangement cannot be expected to work in a larger industrial firm.
It is simply the number of people involved that makes this impossible, as well as the difficulties of focusing their activities, in an orderly fashion, on the single objective of turning an idea into a reality.
In an area where it is necessary to create a very fertile and inventive atmosphere this type of group structure can sometimes be made to work.
Its success depends entirely on the personalities of the people involved.
During the 1960s I was a mechanical engineering consultant in what was then a very embryonic consultancy in Cambridge.
An informal team structure evolved between designer, draftsman, instrument maker and general assistant  that allowed the four of us to exchange roles as the demands of the project changed.
The team was thus able to migrate from planning, through drafting and manufacture, to assembly and commissioning, with up to three exchanging roles at any time.
The success of this particular work pattern relied not on a formal structure, but on the economics of the time and the close personal relationships created within the team.
Such situations are notoriously unstable, as it was in this case, for the team remained together in that form for less than a year.
The formal design process has thus evolved to provide a more stable route to the development of ideas.
STRUCTURE OF THE DESIGN PROCESS
Whilst design is, in practice, an involved and complex set of events, at this stage it is only necessary to define it as three interrelated sub-processes (see Figure I.l).
The primary phase contains all those activities which go together to formulate and bound the problem.
In other words it handles the conceptual processes.
It is here that alternative approaches are discussed and weighted, and this leads ultimately to a refined solution.
The activities of the conceptual phase are not just acted on and completed on their own before any other phase is considered.
Each sub-process reflects the general confidence-building and problem-understanding nature of design itself.
Whilst it is necessary to commence with an idea or concept, it is important to evaluate it at the earliest possible time, and thus the procedure is to commence testing by moving briefly into both the analysis and scheming  phases.
The idea has to be checked against the, as then, known facts about the problem.
The analysis phase may simply be checking whether such a proposal could be expected to provide the function required.
If not it should be modified or abandoned right away, before valuable time is wasted.
Similarly, the excursion into the scheming phase may just be to check that such a mechanism or structure can be accommodated in the overall product or project.
If some components have to be physically larger than the space provided or require other "upstream" or "downstream" components to be modified as well, then the consequences of pursuing such a concept must be similarly recognized at an early stage.
Information gathered by these excursions into adjoining phases is thus fed back into the previous process in order to reinforce the adopted approach, modify it or cause its abandonment.
Such a process cannot be described as a set of sub-activities connected by unidirectional communications.
The connections are instead seen as a network of communications â€” "pipelines" in which information flows continuously in both directions, between all elemental activities (see Figure 1.2).
The procedure is thus controlled by encouraging the rapid exchange of ideas and responses during the early part of the process.
As the concept is further developed the natural flow of information is reformed into larger packages moving at less frequent intervals.
Fewer requests for confirming analysis take place from the conceptual end, but a greater number are initiated through the scheming process which has gradually taken over from the conceptual phase as the main centre of the design work.
As the chosen design is developed and its uncertainties reduced, the conceptual phase of the process moves from a predominantly questioning role to one of mainly checking.
Initially the activities are such that the validity of the idea was questioned, and this was checked by activities taking place in the scheming and analysis phases.
As confidence in the concept rises the emphasis of the design work moves on to the scheming phase.
Here the details of the particular approach are now worked out.
The activities that remain become larger and more detailed exercises.
It is at this stage that a major computer study may be undertaken into the integrity of the proposed design, in terms of function, strength, economics, etc.
This may be the last check of the design before it is "sealed" and handed over formally to the production team.
Computer Aided Design and Manufacture (CAD and CAM) This formal separation between design and production is seen by many as the separation also between CAD and CAM.
Originally, many computer-based systems were viewed as having the role predominantly of providing the "design paperwork" .
That is to say they operated in such a way as either to confirm the proposed design (by acting within the analysis phase) or to generate the engineering information for production (by acting within the scheming phase).
This then is the origin of the two distinct types of CAD system which now exist (with a third having its origins in the manufacturing phase).
The development of computer-based design techniques has been, until now, on a piecemeal basis following the specific needs of the developing group or supporting company.
This process, of devising solutions for particular needs, should be recognized as the natural course of development in all engineering situations (as opposed to a science-based approach where general principles would be extracted).
The "target" nature of engineering activities will not, therefore, follow systematically through the design process by converting each stage at a time into a computer-based procedure.
Development will  commence on the areas of greatest need or those of easiest justification.
A patchwork of techniques has thus been developed, having no common base, but all existing under the general umbrella of CAD.
If then the existing techniques (or available programs) are categorized under the three main design phases, their role within the overall design process becomes apparent.
It also helps to clarify those areas of design which have been successfully computerized and those areas which have been neglected.
Figure 1.3 gives the broad outline of the classification for electrical and mechanical engineering and architectural design activities within the three phases.
This grouping of techniques within CADCAM allows the potential user to choose or assemble a system, from all that is available, which will best fit his needs.
SCHEMING â€” TERTIARY DESIGN
When such a classification is employed it becomes obvious that the majority of work has been directed towards these tertiary activities.
The main aim of the normal turnkey CADCAM system is to operate in this region.
This approach is not surprising as, whilst the inputs (in terms of component requirements) are varied and numerous, the output format is very well defined and falls into two well documented categories of either man-readable or machine-readable instructions.
Two types of man-readable data are prepared: drawings and schedules.
The drawings contain both pictorial and symbolic representations.
Many levels of pictorial description are available, from the simple two-dimensional representation of the drawing sheet, through to the full three-dimensional solid body of complex shape.
The correct level of representation can then be chosen to fit the needs of the particular work in hand.
The type of drawing (or "language" used) again depends on the particular application.
The rules of presentation and representation change depending on whether the output is an electrical diagram, engineering drawing or site plan.
The techniques employed for the geometric representation of three-dimensional bodies vary, as do the methods of storing and retrieving the data.
These again must be chosen to match the needs.
The construction of solids for interference analysis imposes quite different geometric constraints to those for the construction of isometric (or perspective) pictorials.
Whilst the generation of numerically controlled tapes for production is usually separated off as being part of CAM, it is really the machine-readable part of the tertiary design phase.
The decision to instruct a machine to produce an item automatically, rather than produce a pictorial representation, takes the designer down the CAM route.
ANALYSIS â€” SECONDARY DESIGN
The word "design" , when used in common English, tends to imply that some creative activity is taking place.
Our expectation of what is deemed to be "creative" is equally vague.
Anything that is simple and obvious is not creative and hence not design.
There is thus a tendency for some engineers to say that drafting (and therefore tertiary design) is not really design; that the mundane activities necessary to produce an artefact really belong solely to production engineering.
Design really only takes place from the conception of an idea through to when it can be seen as a fully developed and workable solution.
Thus, when many people talk (or think) about CAD, they are referring to the secondary design activity wherein the seed of the idea is fully investigated and developed.
Within this secondary category are grouped all the engineering analysis activities normally performed using computers.
Many such programs have been developed over the years to exploit the computer's ability to retrieve and/or manipulate large quantities of  data.
Complex matrix and iterative processes can be employed to resolve or optimize a large number of variables in a complicated interactive model.
It is thus not surprising that, to many people, design means the application of high level analysis programs such as finite-element structural analysis and automatic circuit analysis programs.
Whilst these are perhaps the most complex analyses that need to be performed, they are not at present really interactive design programs; they are simply used for the analysis of a specified configuration.
However, much analysis and design work can be performed on an existing turnkey computer system by making use of its large graphics capabilities to generate the models, but with only a limited amount of "on board" numerical manipulation.
The large "number crunching" processes are thus performed by linking such systems to a suitable mainframe running the necessary software.
Much design at present is performed in line with company or national codes of practice and standards.
Programs can be provided or written which interpret the component design in accordance with these rules.
The program output can be in the form of specified data or given as nomograms which can be interpreted by the designer.
Many companies have developed a range of these programs to satisfy their own needs and requirements.
They thus tend to be solely related to a company and its products, and remain unpublished as their content is only of interest to their direct users and competitors.
It is therefore in the areas of secondary design that the software houses are most active.
Packages are developed in accordance with customer requirements or by recognizing that a common need exists within a particular field which can be exploited.
CONCEPTUAL â€” PRIMARY DESIGN
Little or no work has been published on this conceptual activity.
Whilst the desired output and constraints can be specified in both the secondary and tertiary activities, it is extremely difficult at times to specify the form of the output required in the primary stage and even more difficult to attempt to quantify it.
When asked, many designers are either unaware that they are performing any creative activity or are unable to describe it rationally.
 "It just comes" or "It's obvious" are the normal responses.
Without an understanding of the logic, weighting and constraints of their design situation it is impossible to provide the supportive design aids.
This is the area where the greatest benefit could occur, but the effort necessary to develop the techniques may be enormous.
Strangely, it is in this area that the greatest fears concerning CAD exist.
There is the almost paranoiac feeling that the machines will take over; artefacts will be designed and produced without human control.
Computer-aided design then becomes seen as a threat rather than a design aid.
This is possibly caused by the lack of clear understanding of the designer's role in this primary phase.
It is here that a true designing system will be based and will grow from an understanding of the conceptual activities, how they are developed and controlled.
The Relationship Between Activity, Weight, Control and Role
The elements of design and their interconnection into the process network are relatively easy to recognize and generalize, and so produce a common basis for all design activities.
It is however the subtler aspects of weight, control and role which "colour" the process, to the extent where one case is so different from another that their common origins are all but lost.
The difficulty in fully defining the process arises from the fact that it is essentially five-dimensional.
Whilst most design theories concentrate on the various elements and their interconnection as previously discussed (often referred to as the "anatomy of design" ), only a few refer to the different weights these may have in different situations (sometimes called the "morphology" ).
No account either is taken of the other two major dimensions, control and role, with the effect of time also being completely ignored.
The process is thus usually described in its anatomical form simply as the relationships between a number of development activities.
The complexities of the design procedure can be reduced by grouping individual activities under global headings, to give the macro description as described earlier in this chapter.
Here only three sub-activities are shown: commencing with the concepts phase, leading into both the analysis and scheming phases, and then passing through to the manufacturing phase.
Whilst the natural flow of the design development must be from the top to bottom of Figure I.l, due to the iterative nature of design no truly sequential relationships can be inferred from their order.
That is to say that in reality, effort is not applied exclusively to the various phases in turn.
One is not completed before another is commenced.
Information flows continuously throughout the network in all directions.
In practice a confidence level has to be developed within each activity, which can then be used to determine whether it is worth  pursuing downstream activities or not.
This is thus seen to be a continuous monitoring activity as changes late in the development programme, within say the concepts stage, could severely affect the confidence in all downstream activities including the actual articles being produced.
The process is consequently one more akin to topping up the various activity boxes with water, with flows being initiated from one to another once selected levels have been achieved.
REGULATING THE DESIGN PROCESS
Such a dynamic system is inherently unstable and has to be monitored and controlled in order that an optimum performance can be achieved.
The design process is regulated by these mechanisms; both very manpower dependent.
All large organizations are departmentalized, within which the staff have particular areas of responsibilities.
Even within small, less formal, design groups people will apportion responsibilities and undertake "containable" sub-studies.
These group or individual-related activities will usually be centred on one of the major design phases but address only an element of the overall scheme.
The design department is thus broken into a number of manageable teams, with, taking the aircraft industry as an example, separate responsibilities for engines, wings, mainframe, control surfaces, services, etc.
All teams work on individual specifications, with the interaction and integration being handled at a higher level.
Within the other major departments, reflecting the other phases of design, their responsibilities are seen to be in responding to direct requests for schemes or analysis.
The drawing office produces engineering data and drawings on instruction, originated in the design office and released by product control.
Similarly, the stress department responds to requests for analysis based on specific details originated within the design department and/or the drawing office.
The regulation is thus achieved by defining roles, or areas of responsibilities, for individuals and groups, and formalizing the means of communication that can pass between them.
This requires the development of a product control team and inevitably leads to a mound of paperwork and forms.
By such processes, communications are regulated and restricted.
The creative and necessary activities are encouraged (even demanded) whilst the destructive are curtailed.
The various weights that the four fundamental activities can have, the controls imposed and the roles defined for individuals and departments, will vary for particular design processes depending greatly on the type of product being developed.
Product Constraints
The type of product being manufactured by a company can be classified in the simplest possible manner into two distinct groups; those which are technically overconstrained and those which are underconstrained.
TYPE 1 â€” OVERCONSTRAINED DESIGN
Overconstrained products usually exist in the high technology markets.
When all the design parameters and constraints are first laid out no natural solution exists.
In logical terms this is to say that no intersection exists between all constraint fields.
The design of an aircraft structure falls into this category as the preferred solution for a component design would be that it has zero mass and infinite strength.
As neither is achievable (or should be attempted at the expense of the other) an overconstrained system exists.
The design process thus evolves around analysing alternative proposals until the correct (or most acceptable) compromise is found.
Here the aircraft component will have an acceptable mass and strength which will result in it having an optimum working life.
By their very nature, overconstrained design situations lead to the development of analytical techniques to solve them.
It is here that finite element analysis comes into its own.
A (compromise) solution must be found and its validity demonstrated prior to the expensive activities associated with manufacture.
It is for this reason, within such organizations as the aircraft and motor industries, that the detailed analysis and optimization techniques are dominant.
The overconstrained product design process is thus seen as emphasizing the weight of the analysis phase and its direct influence on both the scheming and manufacturing stages (see Figure I .4).
Major changes in product concepts thus rarely occur.
Development is, in the main, centred around the information and techniques currently available within the data base.
When radical departures are made from that current knowledge the company becomes more vulnerable.
A number of cases exist where companies have been forced to employ new materials and processes outside their normal (up until then) field of operation, resulting in a period of component or equipment failures until the company has been able to acquire that necessary working experience.
A comparison of the motor and aircraft industries shows that recently the motor manufacturers have found it easier to apply new concepts.
This is largely due to the fact that the cost of prototypes in their industry are but a fraction of that of an aircraft.
The motor industry is thus able to invest some risk capital in experimental   projects in order to increase its working data base.
Since the 1960s the amount of purely speculative experimental work on aircraft has all but ceased.
Within this form of the design process the scheming and manufacturing processes are found to be highly dependent on the analysis phase.
In an overconstrained situation, if the analysis indicates that there is only one way to produce a successful product, that is the way it has to be made.
This could result in all downstream activities being changed.
A change in the type of materials being used in the construction, such as a move from steel to fibre-reinforced plastics, can result in a change in design drafting rules and drawing techniques leading right through to the replacement of complete sections of manufacturing machines and skilled men.
The aircraft industry pioneered the development of integrally machined parts, in order to get the necessary structure strength.
This resulted in a whole new breed of machine tools and techniques.
The motor industry often goes to the expense of building a completely new factory site to ensure that the manufacturing capability does match their requirements exactly.
CAD Configuration
When the overconstrained design problem is viewed in this way it is not surprising to find that it has led most of the thinking of CAD systems.
Many CAD turnkey systems produced are thus aimed directly at satisfying these needs.
As the major design route passes from analysis, through scheming  to manufacturing, it is possible to recognize systems which have their origins in each of these main areas.
Some concentrate on the large-scale surface geometry model and structural analysis.
Some work principally in the engineering drafting areas.
Others centre on the production of numerically controlled (NC) tape data.
In an attempt to cover the largest market all have expanded into adjacent areas.
Whilst it is possible to involve CAD at any of the three levels, it is often seen that even the high technology companies will initially approach it as an element replacement activity (low level).
One is thus able to find companies which have a separate computer-based system for each of the three main activities.
The analysis (usually mainframe) computer may not be compatible with their turnkey drafting machines.
The NC activity and production engineering are often separated from the drawing office (both geographically and spiritually) due to company departmentalization.
They may have their own computer-based system which again may be unable to communicate directly with the other systems.
The communications between these three will be via the traditional manual drawing procedure where data is extracted in pictorial form, carried to the new site and re-entered.
In some companies the problem of interfacing between these separate activities is now being tackled.
Different hardware and software configurations are making this process more complicated.
The realization that certain data is only used within processes whilst others have to be exchanged between them, has led to an increased interest in data management systems.
Although it is seen that the greatest benefits are likely to be gained in this design situation by taking a design controlling attitude (high level approach) to CAD implementation, there are very few companies where this has been attempted, let alone achieved.
This must be due to the current lack of understanding of the design process and the risks associated with developing such a system.
At present all CAD companies are pushing their techniques from the low to the mid level of involvement.
None have the necessary experience to build a high level system.
Whilst the user companies cannot be expected to make the necessary investment for themselves, this approach and its great benefits will remain unrealized.
TYPE 2â€“UNDERCONSTRAINED (IDEAS CENTRED) DESIGN
In this type of design situation the company's activity is centred around bringing out products simply to satisfy market demands.
The company's brand may be recognized as being associated with a whole range of products with similar environmental usages and styles, such as kitchen utensils, office equipment etc.
The design of  such artefacts centre around the concepts end of the design process.
Materials and techniques are chosen to give the required function and a recognizable market style.
Effort is put into the construction of models and prototypes rather than an extensive analysis programme (see Figure 1.5).
Often the manufacturing procedures employed in this range of products are so wide and specialized that it is not economic for the company to provide them all internally.
The company's scheming activities may be used in the production of detailed engineering drawings to be passed to sub-contractors for production.
Such companies may receive back the piece-parts for internal assembly or be supplied with the completed article.
CAD Configuration
At present there are very few CAD products which will significantly aid and improve the ideas-centred design process.
If the production quantities are very high then the purchase of a simple drafting system may be justified and an investment could be made in some CAM equipment.
The effectiveness of the design process may, however, be dominated by the necessity to respond very quickly to market pressures.
Many alternative schemes may need to be compared and their effectiveness evaluated.
The ability to generate formalized  drawings may be of a low priority (and in some cases an unnecessary step) in the development of that product.
At present no CAD system is configured to provide a means of comparing many alternative schemes against a given set of design parameters.
The techniques necessary to provide this type of system are, however, currently under investigation.
TYPE 3 â€” UNDERCONSTRAINED (SKILL CENTRED) DESIGN
The second type of underconstrained design process is focused on the manufacturing aspects (see Figure I .6).
Here the company has a  certain range of manufacturing skills which it attempts to employ in the most productive manner.
If the company's strength is centred around its ability to produce large scale structures then the company's efforts will be concentrated on keeping that facility fully employed.
(The type and purpose of those structures may be of little importance.)
The company is thus providing a service to others who wish to purchase these structures.
Such a company must be prepared to invest in its ability to produce economically, if it is to remain competitive.
This may require an ability to translate ideas into engineering details rapidly, by producing drawings or the direct interpretation into machining instructions.
CAD Configuration
The type of CAD system that would be of use to such a skills-centred firm would depend not only on where they expect to interface their system into the existing design process, but also on the volume of products being produced, and the skills being provided, by the manufacturing facility.
If the skills required are to produce limited numbers of components of craftsman qualities, only the drafting procedure could be automated.
If one set of product designs can be used as the basis for the development of another, then a CAD system may be employed effectively in the production of those drawings.
When little similarity exists between designs, and their quantities are small and irregular, CAD in its present form can offer very little.
TYPE 4 â€” REFINEMENT CENTRED DESIGN
The final possible design configurations shows the process focused on the scheming stage (see Figure 1.7).
Here the product under  development may face severe competition on the open market.
The scheming phase is thus employed to refine the elements being detailed; studies on cost effectiveness can be conducted and alternative schemes evaluated.
CAD Configuration
The current range of design drafting and production engineering  programs could be integrated into a scheme to provide a refinement-centred system.
Whilst most of the program elements exist for designing component parts, the main development remaining to be undertaken lies in the procedures for allowing the designer a rapid comparison between a large range of schemes and known design parameters.
Optimization procedures would necessarily include an economic data model which would allow the cost to be projected into the full production situation, and compared to the various technical requirements set for the artefact.
Man-Machine Interactions
Despite the widespread use of computers in many areas of work, there is unfortunately a significant degree of misunderstanding concerning them.
This ranges from the belief that computers (rather than the programmers and/or users) are the sole cause of any mistake, to one that computers are infallible and are capable of undertaking virtually any task.
The result of this can be either excessive user resistance to any type of computer, or total acceptance of all output from the computer without questioning the premises of the program.
It is important that the capabilities of the computer be recognized and used to aid the designer in his tasks.
It is equally important that the human capabilities be recognized and used where a computer is not so suitable.
Eaglesham stated that "â€¦even in a computer-driven design system, the computer assists (but does not supplant) the designer, who continues to take the final responsibility." 
Thus man and computer may be seen as having interdependent but complementary skills.
Of fundamental importance to an efficient and usable CAD system must be the mode of communication between man and machine.
Great advances have been made since the early days of computing, when specialist skills were needed for such interaction.
Systems can now be programmed to use near-natural language for input and output.
However, in most commercial systems this is limited to a predefined set of English commands.
A conversation is built from pairs of transactions, each pair being a statement or question followed by a response to it.
At his first approach to man-machine conversation, the system analyst often tends to think of the man as originating each part: the man says something to the computer and the computer replies.
Frequently, however, the other possibility gives the better design: the computer originates each interchange and the man responds.
The process of interaction must however be initiated by one of the parties.
The question of whether operator-initiated or computer  initiated communication resulted in better design was one aspect of CAD systems investigated in a set of experiments.
These were undertaken in a fundamental research program that set out to compare various models proposed for a CAD system.
There are two recognized types of program which have been developed to aid design.
Both were considered in the following ways.
OPTIMIZATION TECHNIQUE
This approach, also known as automatic design, employs optimization algorithms, usually of a mathematical nature, in such a way that a preferred solution is obtained for a given set of input parameters.
It may take some time to program this technique as it has to take into account all foreseeable circumstances.
It can thus be said that the programmer, rather than the user, dictates the form of the final design.
This technique can be somewhat inflexible to change, needing major reprogramming for a slight alteration in problem requirements.
It is thus more suited to the latter stages of design, when the problem has been explored and the parameters and constraints are well defined.
Difficulties arise with such techniques when it is necessary to choose both the objectives and constraint forms for a design condition that contains a large number of conflicting requirements.
The order or weight given to one requirement over another will prejudice the solution.
Under certain conditions this can lead to an inappropriate choice of the objective function or of the constraints, giving an unacceptable solution.
Moreover, convergence problems can arise.
However, once written, this technique requires less computing time and less designer time than comparable techniques.
It will, also, always return the optimal solution to the problem, within the limits of the underlying algorithms.
With this approach it is therefore possible to construct a library of programs covering most common, but simple design problems handled within the design office.
SIMULATION TECHNIQUES
Simulation, interactive design and decision design are all names for a technique requiring the user to interact directly with the computer.
The given design problem is thus simulated rather than actually solved for the user.
Programming time is usually less than for an optimization technique but designer time is frequently greater.
It is fairly flexible, allowing minor alterations or additions to the program to account for problem re-definition.
Consequently, it may  be used more easily and fine tuning in earlier stages of design is much easier than is the case with an optimization technique.
Its use is most appropriate for "open-ended" problems where an infinity of solutions may be possible for a given set of design parameters.
The designer's decisions during the interacting throughout the simulation process is thus of paramount importance.
Although appropriate for many problems, as this technique does not constrain the creativity of many designs, there is no guarantee that the "best" solution will ever be obtained.
However, it must be noted that the optimization technique provides no such guarantee either.
Such a technique optimizes the model utilized by the program, but only if there is an "optimal" fit between model and problem will an optimal solution emerge.
Simulation Modular and Simulation Linear
The type of man-machine interaction chosen for simulation further divides this classification into two distinct types.
An operator-initiated dialogue may be employed, with various options to be called from a menu in an order determined by the user.
Alternatively, a computer-initiated dialogue may be used in which the operator is presented with a series of questions that advances the user through the program in a linear fashion.
It is this latter method which is most used in simulation programs on CAD systems.
THE TECHNIQUES IN PRACTICE
A comparison of these three types of CAD techniques (optimal, simulation modular and simulation linear) was thus made, with a view to developing a greater understanding of the means by which the computer may be applied as an aid to design.
Three programs illustrating these techniques were written for use on a microcomputer.
Sixty-eight trainee engineers, with varying degrees of computer expertise, participated in the experiment.
Each subject was asked to use each technique to solve a simple problem, having two constraints and one objective.
Questions were asked after each problem, and at the completion of the task, to obtain the following objective information: 1) the ease of use of each program, 2) the insight gained from using each technique, 3) the aid given by each technique in attaining a solution, 4) the user preference, and dislike, for the techniques, 5) the technique thought to be most capable of giving insight, 6) the technique thought to be most capable of giving the best design, and 7) the subject's engineering and computing background, and knowledge of the polar second moment of area; this being the sectional properties of a component that allows the shearing stresses to be deduced from the applied torque.
The subject's replies were recorded on tape, whilst moves made during the program runs were stored in a data file.
Each participant was asked to construct a two-dimensional shape, with or without an inner shape, such that given perimeter and area bounds were satisfied.
When included, the inner shape was taken to be a hole or cut out in the total shape.
The total perimeter was then taken to be the sum of the outer shape with the inner shape perimeter, whilst the total area was taken to be the difference between the outer and inner areas.
The participants were also asked to minimize the polar second moment of area of the total shape.
Each was given 30 minutes to solve the problems they were set.
The three CAD programs used the same input and shape adjustment routines.
An introductory program was written containing these routines, so that the subjects were able to attempt shape input and adjustment, before using the programs illustrating the CAD techniques.
Therefore, the system unfamiliarity was diminished before subjects were required to solve the problems and compare the techniques.
The order in which the techniques were presented to the subjects was varied, in a further attempt to reduce the effect of system unfamiliarity.
Whilst the experiment was limited to trainee engineers and by the type of microcomputer used, the results of this investigation indicated that: 1) the mode of man-machine interaction which was most popular and has the fewest dissenters, was one in which the user directed the course of action, as in the modular program; 2) a fast design time was most likely to be achieved by the use of an optimization technique; 3) an optimum design was most likely to be achieved by a preprogrammed optimization technique, but only where the problem, design parameters and constraints were understood; 4) the technique thought most likely to allow some gaining of insight was one in which the user has control of the program, as in the modular program.
Conclusions
The modular, simulation technique appears to have been preferred  by more subjects and perceived to give greater insight than did the optimal technique.
The optimal technique was perceived by a majority of subjects as providing the best solution, this result being supported by the analysis of solutions actually obtained.
It must be noted, however, that the problems set were simple ones for which the model employed was an optimal fit â€” thus solutions were actually optimal.
In practice this will not always be the case; certainly in the initial, exploratory phases of design.
One conclusion from these results is that a linear technique, which satisfies none of these design attributes, should not be used.
The decision as to when to use the modular technique and when to use the optimal technique depends on the relative importance of the design attributes.
The most appropriate approach might comprise of a combination of the two used in the early stages of design, with an optimization option being employed when the design possibilities have been explored and the parameters, constraints and objectives are no longer likely to change.
At that stage the model presents a good "fit" to the problem and good solutions can emerge.
The study indicated that a nested approach should be used in which optimizing programs are available for the solution of well understood design problems.
The results of the experiment described here suggested that such options should be available in menu form within the context of an overall modular approach.
The use of the modular approach initially brings the very real advantage that it appears to be more acceptable to users and provides greater insight for the designer of the design problem.
This developing insight should allow the designer to specify the design problem, and choose when to apply a modular approach or an optimizing approach at later stages in the design process.
Proposed Design Approach
The current development of CAD procedures has so far been directed towards providing a complete geometric description of an object initially, and then moving on to the generation of manufacturing instructions (see Figure 1.8).
Systems are thus configured to provide various tools, which range from two-dimensional drafting programs, for the production of engineering drawings to set standards, through to full solid and surface modelling, in order that complex objects can be machined.
All of these activities have led naturally to a clearer and more exact description of the geometry involved in the generation of any individual component or assembly.
This approach to design recognizes only part of the role executed   by the designer.
Design is not simply the production of shapes, it is the development of those shapes to satisfy a specified purpose.
They must be spatially sound, they must work and it must be possible to manufacture them.
The procedure must also recognize the problem-solving nature of the designer's work.
Whilst it is obvious that the manufacturing activities are greatly dependent on the specified geometry, it is unclear as to how the function and shape of a component interact.
The proposed design activity on which this is based is shown in Figure 1.9.
Here the complex interactive nature of real design is modelled.
Rarely are all the constraints on shape, function and manufacturing clearly defined at the commencement of the activity.
Even less are they understood and their effect, one on another, recognized by the designer.
Design is thus an activity where "boundaries" are explored.
Constraints are imposed or recognized during the course of the design.
It is thus necessary to generate a model in which the final design is achieved by iteration and tested against the major constraints of shape, function and manufacturing.
This design model shows the close dependence of manufacturing on geometry.
The main decisions about manufacturing processes are made on the basis of shape, operations to be performed and batch size.
This is a natural consequence of machine tool design in which metal removal operations are performed by the application of discrete surface generation techniques.
Objects are thus directed towards certain machines dependent on both their shape and required machining operations.
A link does however exist between manufacturing and function which is often forgotten.
This is usually most apparent during the choice of materials.
It is usually a compromise between the necessary functional requirements (strength, weight, etc) and those of manufacturing (availability, machinability, cost, etc).
At other times, the manufacturing processes may be dictated by the  functionality of the object, in cases such as when strength requirements demand that it be forged or where surface finishes, such as being optically flat, restrict the available processes.
is to show and enable us to handle the relationships that exist between geometry and function.
Clearly they react on each other.
The loop is often closed, as for example in a cam where geometry dictates function and function dictates geometry; in such mechanisms geometry and function are interwoven.
In most components some geometry is dictated directly by function whilst the remainder provides "packaging" and style.
The difficulty in mechanical engineering design is centred around the recognition of these different features and establishing their effect on the design constraints.
Establishing these aspects initially is difficult enough, but the real headache is to maintain and apply them continuously throughout the various iterations of a changing design.
Design Theory
Fundamental Requirements
The procedure of creating a new product has been conducted many, many times throughout the engineering industry in many different ways.
Whilst the design process used in individual cases can be seen to contain common elements of activity, communications and control, the weighting of events and degree of design iteration necessary tend to be unique in each particular case.
In truth, the recognition that it is a problem-solving exercise, conducted by people of varying skills and experience, leads naturally to the conclusion that the likelihood of there being any similarity, at a detailed level, is extremely remote.
The degree of difficulty of the problem, the uncertainty of the constraints and applicability of the experience of the team members, all contribute to the uniqueness of the experience.
It is therefore more constructive to concentrate on the needs of the designer, than on the individual process elements involved.
In order to achieve a particular level of confidence in a design, certain activities have to be performed.
These are dependent on problems and experience.
An experienced designer will take "short cuts" if his level of confidence in a particular approach or technique is high.
A novice designer will "tread more carefully" , checking each idea by testing, analysis or precedence.
How each person tends to proceed through the design process will be unique but the overall constraints imposed on whoever tackles the job will be identical.
Like two men in a maze, one may know his way and would make very few wrong turns in reaching his goal, by picking up familiar clues along the way.
The other man may never have been in this situation before.
He is thus learning how to pick up these clues by exploring his environment.
The wrong turns provide additional boundaries and constraints as the exercise proceeds, leading him ultimately to the same goal.
As with design, there may be many ways of reaching the centre of the maze; all of these will be right but some will be more efficient than others.
Unlike the maze analogy however, the design process  does not have a single, correct route; there is no perfect centre, rather there is a target within which all acceptable answers lie.
Some designs will thus be better, preferred over others due to their ease of manufacture, their simplicity, their rigorousness, etc.
With there often being many routes to approximately similar goals, there would appear to be little to be gained from studying these developing routes through the design process, However, the constraints and objectives set on the way are seen to "steer" the designers towards similar goals by differing paths.
It is thus seen that it is the constraints and how they arise that are the significant factors in design.
The success of the designer is thus more dependent on his ability to identify and handle the boundary conditions of his problem than on the development processes adopted.
FUNDAMENTAL DESIGN ACTIVITY
The fundamental activities being undertaken by the designer have been investigated therefore.
In mechanical engineering these are seen to be  centred around the generation of geometric shapes which in association perform a specified function.
The current practices, both those of manual and CAD drafting, are seen only to record the geometric entities and not their function.
An engineering drawing may contain a circle amongst the many thousand entities laid down in its generation.
Whilst the designer knows why a circle has to be drawn, it is not specifically recorded with that entity.
By viewing the entire drawing it may be possible to deduce its intended function.
A row of similar circles in a plate might suggest lightening holes.
Text indicating the tolerance conditions imposed on the circle may clearly indicate, together with other geometric features, that it represents a bearing surface on a shaft.
Instructions on the drawing may indicate the assembly to which it belongs and the drawing number of that assembly.
By reference to this, more information may be gathered on the component's function which may further clarify the discrete purpose, or purposes, being attributed to the entity under consideration.
From this, and knowledge of the requirements of the complete machine or structure, it is possible to ascertain the reason for the inclusion of any feature, or entity, in the detailed design layout.
The current drafting and CAD processes assume that the significance of any entity will be obvious or easily ascertained by anyone wishing to know.
More important, perhaps, is the assumption that the effect of making a change will also be obvious and easy to establish.
PROPOSED DESIGN THEORY
The theory under development recognizes that major improvements can be achieved in the design process, by providing a greater understanding of the consequence of each proposed activity on the integrity of the design scheme.
The design process is recognised as being one of refinement, in which a number of iterations may need to be made before all the design goals are achievable.
This arises from the inability of the designer to analyse or interpret the effect of all elements of the design on each other, and on the overall performance of the complete assembly.
Whilst it is not possible to conceive of a designing system which can take into account influences which are beyond the designer's knowledge and comprehension, it is possible to generate a fundamental design procedure in which all relationships, known to the designer, are "captured" and tested for.
This procedure thus starts during the concept stage where relationships and associations, rather than geometric shapes, are being considered.
The functionality of the assembly can therefore be established by set relationships.
Entities and models can be considered as elements within the set that describes their assembly, and each of these geometric entities is considered to lie within a local space.
The relationship of a hole to a block is established by indicating that the geometric domain of the space called "hole" lies within the space called "block" , as shown in Figure 2.1.
If such a hole-to-block relationship is to be defined then a number of expert rules can be established as follows: 1) The domain of "hole" must have a "touching" relationship with the domain of "block" on at least one face to produce a blind hole.
Rules must thus be developed which indicate that holes do not extend beyond the boundary of the solid, and holes totally enclosed within solids are handled as "voids" or "inclusions" .
2) In the relationship of "hole" to "block" two touching faces indicate a through hole, if the faces do not relate to the same end of the hole.
3) "Holes" cannot have boundary surfaces completely outside of the domain of a solid; these produce groves or keyways.
It is thus possible to describe an assembly of entities making up a component as a set of elements, such as shown in Figure 2.2, for both the geometry and the function.
Whilst both the block and the hole are seen to be elements of the "component" , they must maintain a specified relationship in order that the functionality of the component is maintained, ie the domain of the hole lies within the domain of block according to the   previously declared rules.
This provides an inserted condition such that all elements of the domain called "hole" are in the domain called "block" .
This relationship can be transcribed from the geometric domain into the functional domain by grouping the functional attributes into sets.
In this case the group attributes declared for the definition of the hole are wholly contained with the attributes declared for the definition of the block.
Thus, if a blind hole is to be created then an attribute must be defined which will provide a unique association between the hole and block.
This is achieved by declaring an attribute which establishes a touching relationship only with another space domain.
This attribute is also declared for the block, together with an attribute declaring that the domain of the space contains a solid.
Thus, if: attribute Al, = single boundary touching only with a second domain, and attribute A2 = solid in domain space.
(Note: suffices are used to declare unique or common occurrences of attribute.)
Then: hole = set of  block = set of  The Venn diagram for this relationship is shown in Figure 2.3.
Due to the hole not being declared as a solid, the assumption is made that it is a void so that the geometric domain is established for the inserted condition (as voids cannot exist freely outside of solids) to give the geometric domain as also seen in Figure 2.3.
However, if both objects were declared as solids then the "hole" becomes an "object" (solid holes are unacceptable) to give:  This provides the functional and geometric description as shown in Figure 2.4.
If the object and block are declared as being made from differing specified materials then the relations change to:  giving the relationships shown in Figure 2.5.
If the associations are extended to include a pin inserted into the hole in the block then a new attribute needs to be defined as follows.
If the geometric domains are to be described by their orthogonal excursions in the local space of the objects then a pin forced to the bottom of a hole will have a five boundary touching condition.
In some circumstances it is desirable to refine the boundary description down to give a more detailed geometric description in terms of wireframe modelling (in this case circles and boundary lines) or surface and solid modelling (to give cylindrical surfaces or rotational solids).
Thus, the attribute description would relate to the association of prescribed entities, surfaces or Boolean space operations.
If the orthogonal geometric domain condition is assumed then the  additional attribute would be described as follows: A3, = five boundary touching condition with a second domain Thus the sets describing the attributes of the various parts are given as:  The geometric and functional domains are thus generated as shown in Figure 2.6.
Here the single touching condition, together  with the solid and void declarations, gives the correct relationship of hole to block.
Similarly, the five face touching condition, with the solid/void relationships, inserts the pin into the hole.
The dashed line extension of the pin geometric domain indicates that the relationship of pin to block is undefined.
A further attribute declaring whether the solid was a sub-space of the void or vice versa, would have established whether the pin finished below the surface of the block or extended above it.
GEOMETRIC DOMAIN MAPPING ON TO THE CAD MODEL
Once the functionality is established it is seen that geometric  domains can be automatically generated or proposed geometric domains validated.
The design process can commence from either of these situations.
The designer could be assigned a geometric domain in which to work â€” this would be described by default values within an assembly model.
Alternatively, the designer may commence working in "free-space" and later declare it as having fu 
In either case it is necessary to map the geometric domain on to the object being designed, at the earliest possible time.
This is done as soon as some function is declared (the simplest necessary declaration is that some solid entities are being entered) and some volume exists, ie geometric entities that give more than a single coordinate value in each orthogonal direction.
A procedure is then initiated which maps the geometric domain on to the excursion of the object being drawn.
From then on the object can be described, in its simplest form, by its enveloping box.
Even if higher order descriptions of geometric associations (ie detail entities, surfaces or solids) are declared then associativity between objects is first performed on the relevant enveloping boxes (or "local spaces" ) before deciding whether or how to proceed to the higher level of association.
All objects are thus, at the highest level, simplified so as to be initially represented by the orthogonal enveloping local domain in the reference space.
The approach again follows the process of problem bounding by establishing areas of uncertainty in the design rather than detailed analysis.
Such analyses are only performed at the lowest level when the areas of uncertainty have been reduced and refined.
The search for a clash between two bodies commences by establishing whether an intersection exists between the two orthogonal spatial domains.
If there is no intersection then the contained components cannot clash and hence there is no problem.
An intersection does not indicate that a clash occurs but establishes the only region of uncertainty in which all possible clashes could occur.
Handling Violations
Once an enveloping box is established or an old one changed (by the addition or movement of entities) the geometric domain model is checked against that of the functional domain.
Any disagreements that are found to occur between the two domains are reported as "violations" .
Movement of the pin out of the hole will violate the functional relationship set between hole and pin.
The movement of the pin into the solid of the block creates an undeclared (and unwanted) association which is similarly reported.
If the pin is extended so as to enter another spatial domain yet another  unwanted association would be detected and flagged to the designer.
All violations are only reported (not acted on by the system), but they must be resolved before the design can be "sealed" .
The designer can remove the violation by one or a combination of three courses of action.
First, the offending geometric entities can be removed.
Second, the entities with which it clashes could also be modified.
Finally, a new association could be declared which allows the current geometric situation to exist without creating a violation.
Depending on the type of violation that is occurring the second and third course of action may or may not be available to the designer.
He may not be authorized to make changes to other components; these may be owned by other design teams or may have become"fixed once production has commenced.
He may also be constrained in terms of what associations he is allowed to declare.
The easiest way to get a component "accepted" is to declare that it has no, or only the simplest, association with the rest of the machine.
Changes to other designs and associations are thus to be restricted and controlled by an upwards reporting and authorization procedure.
If all components of an assembly are inserted into the reference space declared for that assembly, a geometric domain of higher order is automatically generated.
It is this procedure, described in Chapter 6 on the application of the hierarchical engineering records management system, that can be used to control and manage the design process.
One study used this approach to handle design decisions within an assembly of parts described by a three-dimensional wireframe modeller (see Figures 2.7 and 2.8).
It is then only necessary to search the sub-domains in greater detail to establish whether interferences exist or not.
The process is thus based on an ability to define and interpret the many possible and desirable relationships that can exist between two orthogonal domains.
DOMAIN RELATIONSHIPS
In three dimensions it is sufficient to define three primary states of remoteness, transition and inserted; with perhaps, for simplicity, a number of transition states or a single touching group (see Figure 2.9).
Whilst the outer domain touching condition is the most commonly experienced when handling two or more objects, special transition cases need to be considered in order to be able to  construct an adequate description of an engineering assembly, or the real relationship between two domains which can be both solids and voids.
The internal touching states can be considered as a set of limiting conditions.
These can thus be sub-classified by the number of touching edges between the domains.
The three primary states can be defined by establishing the relationship of the secondary space about the primary in each coordinate direction.
In a one-dimensional system six unique relationships can be established, by defining the occurrence of the secondary within the three zones about the primary (see Figure 2.10).
These zones are defined as existing within the range of the  primary (condition 0), below the range (condition â€” 1), and above It (condition 1).
The touching conditions can be defined as boundary conditions to these six zoned states (see Figure 2.1 I).
This gives rise to an additional seven possible unique relationships between two single dimensional spaces.
Such procedures can also be applied in two dimensions by providing nine spatial zones about the primary space together with the four boundary excursions (see Figure 2.12).
This approach thus results in the specification of 27 zones about a three.dimensional primary space, with touching conditions recorded with respect to the six excursion conditions (see Figure 2.13).
With such a coding system it is possible to establish the primary conditions as follows: 1) Inserted state: that code which contains only one space zone, that being (0,0,0) 2) Remote state: that code which does not contain the zone (0,0,0) 3) Transition state: that code which contains more than one zone with one of them being (0,0,0).
Particular touching states are given by including general or particular excursion conditions.
For example, cubes resting one on another (see Figure 2.14) are given by: This contact state can be simplified as being: A single zone state specified by two zeros and one non-zero with one excursion state.
If space A can extend beyond the excursions of B then the contact state becomes: Up to nine zone states, one being two zeros and one non-zero none being three zeros with one excursion stale.
This specification would allow various touching arrangements to be defined (such as shown in Figure 2.15).
At the same time it is able  to identify the incorrect assemblies of corner contact, partial insertion or remoteness (see Figure 2.16).
Such procedures of space definition can thus be employed to search for or specify general or specific relationships between associating spaces.
Sets of spaces found not to conform to their specified relationships can be redefined or repositioned in order to reestablish those relationships.
The application of this approach to the spatial representation of common objects is illustrated in the following two examples.
To remove nut from shank the shank-to-nut state must be progressively changed from a three-zone state, through two, down to one, where the single state has two zeros and one non-zero (this space is the mirror of the head space).
For lid sitting down on to container, the single excursion in the container relationship must be opposite to that for the lid and one of the possible five in the other relationship.
This approach can thus be used to define the functional attributes of the geometric domains.
In the previous section a pin in a block was used to illustrate the relationship between the geometric and functional domains.
This resulted in a set description of the functions (as illustrated in Figure 2.6) which described the attributes as: The attributes  both describe the properties of the solid spaces whilst the remaining two describe the associations of the intersecting spaces.
Attribute , describes the relationship of the hole to the block whilst , gives the assembly of the pin in the hole.
These can in turn be described in detail by the zonal space and excursion relationships as follows (see Figure 2.19): A loose pin in a hole may rest on the adjoining surfaces and stand on the bottom of the hole.
A force fit will touch all four sides but may or may not reach to the bottom.
All such conditions should be specified and monitored.
Spatial Association
FUNCTIONAL AND GEOMETRIC DOMAINs
The approach that has been applied here is initially to define a functional domain in which all relationships and attributes can be recorded.
This is then mapped on to a geometric domain which contains all the graphical description of the object in CAD terms.
The highest level of system operation thus takes place, not at the normal detailed entity level, but at a level where only functioning  spaces are considered.
This compares directly with the global approach to the description of real objects.
Whilst we talk freely about a "car" when looking at the thousands of bits (or entities, in CAD terms) there is no one part that contains the "true essence of a car" .
It is the overall assembly that turns these parts into a car.
The car (see Figure 2.20) as a single object is declared to have particular features or attributes; these may be size, performance, carrying capacity, etc.
Particular features and style may be attributed to this object to specify the number of doors, type of seats, colour of paintwork etc.
All of these dictate the nature of the actual car under consideration and can all be considered as attributes of the functional domain called "car" .
Mapped on to this functional domain is the geometric domain.
This contains the assemblies, sub-assemblies and component parts in a normal hierarchical bill-of-material structure.
The domain of "car" thus contains all other sub or component domains.
This initially breaks the space up into its major divisions: the engine unit, passenger unit, suspension, transmission, etc.
None of these are confined to single unique regions of the car.
For instance, the gearbox and transmission unit may protrude into the passenger compartment.
Intersections
If each domain is described by an enveloping box (see Figure 2.21) which contains the local description necessary to produce a car (see Figure 2.22), the gearbox-transmission unit and passenger compartment will have an intersection (see Figure 2.23), as these major spaces will consequently have relationships with each other.
The existence of a spatial intersection may indicate simply that two objects are trying to occupy the same physical space.
It may relate to a packaging problem in which a fixed number of unrelated items have to be pressed into the smallest volume.
On the other hand, if two components are to relate in some way to provide a desired function, it must take place in an intersection zone (which includes touching areas â€” zones of zero depth or wholly inserted spaces).
Remote spaces cannot have a physical relationship.
It is thus possible to define the functioning relationships as attributes of the intersecting sub-spaces.
These can then be described in the functional domain and interpreted into geometric relationships within the overlaid geometric domains.
For example, the gear-shift level must exist within the gearbox/passenger compartment intersection, which itself must contain the discrete sub-spaces of movement envelopes which are associated with functions of the gearbox.
Movement of the gear-lever without the appropriate functional operation of the gearbox is an unsuccessful design.
Conversely, correct gearbox functioning is unacceptable if it results in an unacceptable gear-lever movement (either too small, too large, colliding with other fixed objects, difficult hand movements etc).
Hierarchical assemblies
The functionality of the gear-lever is thus seen to exist as a set of attributes of the intersection of the functional domains (see Figure 2.24), which are mapped and preserved within the geometric domain.
The geometric assembly of components to produce an identifiable unit, such as a gearbox, is thus recorded in a hierarchical file having a structure similar to a bill-of-materials listing (see Figure 2.25).
This file maintains, in addition to the normal component information, a description of the spaces occupied by the individual components.
These are established  automatically from the maximum and minimum excursions of the component within the reference space.
The procedure also holds, as the highest record, the "assembly space" , defined as that space obtained from the maximum and minimum excursion values of all sub-components.
This space thus contains all the elements of the assembly and can be reflected up the hierarchical structure to a level at which assemblies are being considered.
Attributes
The functionality of the components, whilst existing within the geometric intersection, is declared as an attribute which exists in each of the sets describing the mating (or associating) parts.
The gear-lever is, in this example, declared to have associations both with the cover and the passenger compartment (in practice many others would also occur).
The attribute, describing the spherical seating of the lever into the cover, is assigned to both sets as attribute .
Also, the attribute denoted as  exists in both sets assigned to the lever and passenger compartment, and may be used to detail the conic space and internal "track" declared to be acceptable for manual operation of the gear lever.
Regulating Relationships and Functionality
Through the hierarchical assembly of geometric domains, the relationship of all piece-parts are established and, via the attribute sets, their functionality can now be determined and checked.
Using this hierarchical file, the functionality of any assembly can be determined, first by establishing that the internal attribute conditions are satisfied (ie lever-to-cover correct), then by checking that any component-to-external attribute relationship is correct (ie lever-to-passenger compartment), and finally establishing that any attribute associated directly with the assembly is acceptable (ie the attribute  declared for the gearbox).
The condition, that allows the application of attributes solely to assemblies, provides a mechanism whereby a simplification in the relationships may be applied both at any early or late stage in a design.
Prior to there being a detailed component to carry the specific attribute, the relationship can only be made to the assembly space.
Once all internal associations are achieved and the geometry fixed (ie the assembly becomes a group of completed parts), the external associations can be re-assigned back to the assembly in order to reduce the complexity of the computational procedures.
Such a procedure would allow for all attributes within an assembly to be grouped into those which can be internally resolved and those associating with external spaces.
Searches for functional   intersections thus take place at compatible levels (see Figure 2.26).
Internal associations are resolved directly by comparing "component space to component space" .
External associations are initially identified "assembly-to-assembly" before moving down to a component-to-component"identification.
For the example of a car described earlier, Figure 2.26 shows that the gearbox assembly file holds these attributes.
The attribute Ag2 associates the gear-lever to the cover and can thus be resolved internally.
The attribute  on the other hand, associates the gear-lever to the passenger compartment and is thus an external association, as is  which is only applied to the assembly (not to individual parts).
Both of these are therefore reflected in the file as being attributes of the assembly and so are rolled up into the next hierarchical level.
Here the gearbox is shown as having an internal association with the passenger compartment.
No details of attribute  have been specified, so it could be considered as an external influence on the assembly, termed "car sub-space" , and thus be reflected further up the system.
HIERARCHICALLY RELATED SPATIAL DOMAINS
Whilst the use of intersectioning orthogonal spaces in the reference space will always bound the problem, it will also produce the largest region of uncertainty.
For instance, a reference space check may indicate two components as clashing, whilst in a local space, again containing both, it may be possible simply to show their separation (see Figure 2.27).
However, the converse does not hold true, for separation in the reference space will always guarantee separation under any chosen local conditions.
The procedure thus adopted is one of first checking the spatial relationships in the orthogonal reference space and, if not as desired, moving down to a local containing domain before the uncertainty is reported.
Again there is no guarantee that, at that level, all the uncertainties will be resolved.
It is then necessary to move towards comparing local geometry in the intersection zone.
In order that the relationships at the local interacting level can be handled in the easiest manner, all local levels are defined as hierarchical sub-spaces of the main reference domain.
All associations and relationships declared in one space can thus be subsequently tested in another related space right up to the reference domain.
If a relationship is then tested initially in the reference space, where the large uncertainty will occur, and confirmation of a successful relationship is not achieved, the test can be repeated dropping down systematically through the hierarchical structure.
The process is then terminated only by reaching a spatial domain   where success is achieved, or by reaching the local domain in which the relationship was originally defined without success.
A region of uncertainty then remains.
ASSEMBLY OF HIERARCHICALLY RELATED SPACES
The relationship between a set of coordinates in one space, and its reference space, is given by a 3 X 4 transform matrix [T].
This matrix contains the nine degrees of freedom allowed between the geometric domains.
These include the six normal kinematic freedoms of three translations and three rotations, together with an additional three freedoms of scale.
 Here the coordinates or functions in A are transformed from B by the relationship transform of "b to a" .
If, however, we consider that coordinates of a higher space C are inserted into B (see Figure 2.28): then the relationship of C to B would be:    So if a space N is set at N-levels above its direct reference space (denoted as 1) then:  This then becomes a nested matrix multiplication process as shown in Figure 2.29.
VIEW SPACE TRANSFORMS
The transform of the model from its final reference space coordinates into those of the viewing plain, are essentially similar to the previous spatial transforms.
In addition to the control values depicting the nine freedoms of space (three of translation, three of rotation and three of scale), it is convenient to include additionally ones of overall zoom and perspective.
The matrix transform thus becomes:  The spatial transformations can thus be included by raising the level of the coordinates to a value of N so that:  The final model-to-view space transform thus results in three coordinate values.
 As only the first two can be plotted on the screen many systems only calculate and hold x and y.
The value of z, however, if calculated, can be employed both in the formation of perspective and in depth cueing.
The simplest form of perspective is generated by calculating the value of z (with its translation set to zero).
This is then used to modify the scale of the untranslated values in proportion to the position as calculated between a z value of unit scale and a z value for the vanishing point.
This results in a pictorial view being created in which the perspective converges to a point directly behind the origin point of the reference space.
The second use of the z value is in depth cueing in which the intensity of the line is chosen to dim gradually as it recedes from the observer.
TRANSFORMATION MATRICES AND CONTROLS
Within all three.dimensional modelling systems some reduced form of this generalized hierarchical transform matrix is used.
Some hold a number of discrete transforms in order that a limited number Of views can be automatically described and displayed.
Normally these include the six orthogonal views as well as others that are user defined to allow for isometric or other pictorial views.
Some modellers are designed to allow the user to perform arbitrary rotational and transformation activities, for the purpose of satisfying various geometric constructions and the generation of auxiliary views.
The Engineering Graphic Generator (EGG) Modeller
This has been conceived as a method of generating and manipulating a range of complex assembly problems.
Here all freedoms of view and hierarchical space have been preserved.
A model may be viewed by the manipulation of 12 variables of view space, including translation, rotation, scale, zoom and perspective/depth cueing.
It may also be manipulated within the reference space by  variables, where N is the hierarchical level of the model.
The variables for each level transform may be defined and fixed, or may be ascribed by associations which are varied or satisfied at each stage (either by direct calculation or by in-built interactive procedures).
In order to provide this degree of flexibility, together with the fastest possible response, a three-dimensional transform and control structure has been developed (see Figure 2.30).
Transforms are thus rolled through the hierarchical spaces by construction of the coordinates in the next associated space, until the reference layer is reached (see Figure 2.31).
This layered transform matrix therefore contains all the current model and view space parameters.
Whilst the nine freedoms for the model spaces may be fixed or automatically updated by associative rules, it is also necessary to be able to express a range for the view parameters.
If the view condition is to be incremented from one state to another in a given number of steps, two complete sets of parameters need to be held.
This is achieved in EGG by the construction of a buffer array which holds all view conditions (current, new and incremental values) as well as the view controls and all model values.
Any parameter directed towards the EGG-modeller is entered via this array (see Figure 2.32).
APPLICATION TO DESIGN
This proposed approach to design is thus one in which the constraints or functional attributes are established at the earliest possible time in order to allow the design to be monitored.
Initially it may not be obvious that a component, such as the gearbox cover, is required.
It cannot be designed before the functioning gearbox has been conceived and must thus be considered as a component of the gearbox space.
Once both the cover and the lever have been identified as separate geometric domains, their functional association can be specified (ie spatial assembly with rotational and positional constraints).
The existence of a set of associations provides a means whereby the integrity of the design can be monitored and violations reported to the designer.
The intersection of the cover and lever spaces, for example, can automatically be checked.
First it is necessary to establish that one exists; if there is no intersection the lever does not pass through the cover and is therefore an incorrect arrangement.
Second, once an intersection is established, its position and the contained geometric details can be checked.
The point of rotations and the spherical contact surface can be identified.
Correct clearance between these entities can be established and checked against the desired relationships.
Clash or interference in other regions can be identified as providing unspecified relationships which can be signalled as violations in the agreed design.
These procedures thus allow errors to be established and corrected at the earliest possible time.
Non-assembly of components, once discovered, can be corrected by re-positioning either the components or changing the relationships between these parts.
Which course of action is chosen will depend on the total design needs and the authority given to the designer.
External geometry and relationships may be fixed, and then the designer can only manipulate the geometry and sub-spaces assigned to his geometric domain.
Such techniques provide both a role-playing and control procedure which can be used to reduce the uncertainty of the proposed design.
As this design technique is based on an iterative model of the design process, its success will be directly dependent on the awareness of the designer.
Requirements, unrecognized by the designer, will remain unchecked.
The technique does however allow constraints and associations to be established, entered and modified at any stage.
In these ways this design process has a close resemblance to the traditional design activity.
Many of the developments within CAD have been led by the requirements for detailed definitions and analysis.
The subtleties of achieving a good design lie, not in the depth of the detail, but in the way the vague and ephemeral relationships are handled and shaped into a functioning geometric whole.
Functional Associations
The function of an artefact, be it a machine or a piece of electronics, is contained in the association of the parts.
The electrical circuit operates because of the correct connection of the components.
The machine works as a result of the correct assembly of the mechanism parts.
The control of the design process, in terms of functionality, is thus dependent first on establishing that the parts associate with each other and second that this association provides the desired function.
The spatial association is checked by searching through the hierarchical spaces for an intersection between the geometric domains of the parts.
The relationship so created is then checked against that declared for the intersection of the functional domain  (see Figure 2.33).
The functions described within that intersection may ultimately be of any form necessary for the specification of the product being designed.
They may be geometrically related, as previously described, geometrically independent or a combination of both.
CONTROLLING GEOMETRIC RELATIONSHIPS
Whilst most activities taking place during the scheming (or "drawing board" ) phases are seen to be based around discrete geometric interpretations, their function may allow them to take on many differing forms.
For example, the size of a region of a component may be chosen to provide a given minimal strength; this will be dependent on the assumptions made over the choice of materials and loading conditions.
Whilst the final check will be in terms of the sectional dimension of the component, these should be compared, not against an absolute set of values but against functionally derived minimum sizes.
These are calculated from a knowledge of the material properties, and the loading and working conditions.
A change to either the material or the conditions will result in a new set of minimal values.
It is thus possible to conceive of certain functional properties that can be defined as being geometry controlling or geometry checking.
These then monitor the geometric relationships as they are developing on the CAD system, and check to see whether the desired function being monitored exceeds a set range of values.
Investigations into Functional Control
The design of a stepped shaft
This type of function can be applied to a wide range of activities, from the selection of standard or stocked components, through to performing fatigue/life calculations.
The principles can be demonstrated by applying them to the design of a stepped shaft where a maximum stress concentration factor has been specified.
The stress concentration factor associated with this geometric arrangement depends on the type of loading and the three dimensions shown in Figure 2.34.
The values for axial tension, bending and torsion are usually provided in graphical form (for example in the ESDU Data Sheet No 69021) by the use of the non-dimensional parameters D1 /D2 and R/D".
These empirically derived curves can be expressed in mathematical form if the range of the variables is limited to practical values.
In this procedure the three parameters were simply identified on the CAD model of the stepped shaft and the appropriate stress concentration factor calculated.
Industrial CAD systems
Such a calculation procedure could be embedded into any CAD system to perform the calculation of concentration values, employing any three nominated entities.
Further, it is possible to propose and develop practical methods for the implementation of such a functional association procedure in an industrial CAD system.
A large engineering data base would be required to cover the useful range of engineering activities and should be handled by a separate suite of programs (perhaps running on a remote machine).
This would also make it manually accessible if required.
The required functional calculation program would thus be called by the declaration of a geometric sub-domain in the model containing the necessary geometric parameters.
This would then calculate the stress concentration value.
Upon declaring this original  domain, the acceptable range of concentration values could be requested.
The value would therefore be displayed on the CAD screen, only if found to be out of range, leaving the designer free to design as he pleased, as long as it was within the range of acceptable values.
As long as all of the parameters of the sub-domain remained the same, the functional calculation program would not be called.
The change of any of these values, however, would immediately evoke the re-calculation of the functional value and, if out of range, its subsequent display on the screen.
It is envisaged that in a practical system a number of sub-domains may be declared with a component during its design, each monitoring differing aspects or regions of the model.
These may be "laid in" by the designer himself, and evoked during the initial concept stage or during the component verification or inspection stage.
Such domains can, as was previously suggested, be used for purposes other than the generation of functional parameters.
The domains may be used to monitor chosen entities in order to automatically select standard or stock parts.
Bearings may thus be chosen and inserted to conform to changes in shaft diameter, bearing length for declared loads and speeds, etc.
Design changes at a later stage, affecting this decision, will provide not only an indication of what components need to be changed but also a visual indication of the resulting effect on supporting components.
The integrity of the original design concepts and constraints are thus preserved throughout the complete development process.
Local Space Modelling
Logical Spaces
The development of an approach stating that the functionality of an item can be mapped on the geometric domain, leads naturally to the inverse argument that the domains themselves can be seen as logical spaces.
That is to say that each space must, in association with all other spaces of the machine, logically perform some function.
If not, there can be no reason for its design and so could simply be eliminated from the scheme.
It is knowledge of these required functions that allows the designer to turn that space into a performing component.
The first step in the process of design can therefore be performed by describing the association of named spaces in order to achieve a desired function.
If a hierarchical structure is imposed on these relationships then the approach can be constructed to give the same type of interrelationships normally found in an engineering bill of materials.
All drawing information is conventionally reflected both up and down the hierarchical tree.
Component drawings carry instructions on where they are used and from what they are made.
Sub-assemblies reflect information on both the higher level assemblies and the lower piece parts.
These assemblies can thus be described as normal tree structures (see Figure 3.1) or as sets of assembly fields (see Figure 3.2).
The assembly fields can be extended into a set of logical fields by including knowledge of how the sub and elemental fields must interact to provide the specified function.
This function is then specified and identifiable in the intersection of the fields both at assembly level (see Figure 3.3) and as relations between individual component parts (see Figure 3.4).
ELEMENTAL AND GLOBAL FUNCTIONS
The function of the assembly can thus be identified at two distinct levels: its internal (or elemental) functions and its external (or  global) functions.
In the assembly example shown in Figure 3.4, sub-assembly 2 must provide a series of internal functions by the interrelationship of its assembly of piece parts whist itself improving a globally specified assembly function with sub-assembly 1.
A gearbox can be identified as providing a means of handling the power of an engine and doing so in a useful form to an output shaft.
The gearbox logical space thus intersects both the engine and the output shaft spaces to provide these global requirements.
Internally the gearbox is constructed from an assembly of gears, shafts, bearing supports, levels etc.
Each must relate to its mating part to provide the overall function.
Therefore, at an elemental level the performance of the unit is governed by the functional relationships being correctly identified and maintained throughout the system.
Whilst incorrect operation may be established at a global level, failure is always apparent at this elemental level.
The gearbox will fail due to the ceasing of a bearing or the damage of a geartooth.
It may however be deemed to be incorrect if it provides the wrong gear ratios.
So whilst the intersections of logical spaces at an elemental level will allow the elemental functions to be maintained, these must be reflected back to the next higher level in the system to establish  whether the required function of that assembly space has been achieved or corrupted.
The elemental functions of intersection are thus reflected up as internal functions of space at the next level, with the result that the required characteristics of the system are specified in more and more detail as the assembly is decomposed into its constituent elements (see Figure 3.5).
APPLICATION IN THE DESIGN PROCEDURE
Such an approach rightly requires the design of a component to be conducted with due consideration to its functional operation, both at an elemental and global level.
The chosen design of an individual gear is seen to be successful only if it not only meshes with the next gear in the train but also contributes to the selection of the desired gearbox ratios.
Current drafting practice embodies these principles within its formalized management procedures and records.
Information on the necessary form of a component is first passed down from an assembly arrangement.
The developed item itself is later reflected back into that assembly in order to check its relationship to all    other components and also to allow the designer to ascertain whether the overall function of the assembly has been successfully provided.
This latter activity is often performed simply by a visual inspection.
Alternatively, an analysis program may be run or a model made.
The proposed design procedure turns the geometric domains of the individual components into logical spaces by the over-mapping of the functional domains.
The designer must therefore learn the techniques of handling space, rather than just drawing components by two-dimensional representations.
This may initially be viewed with some horror until it is realized that the form of representation inserted into the geometric domain may take on any form appropriate to the solution of the problem.
It is convenient to define the geometric domain as a local orthogonal space that will just contain the component part.
In such a procedure the boundaries of the domain can be automatically obtained from the maximum and minimum excursion values of the  part in this local coordinate system.
Initial tests on the assembly, however, are all conducted on domains aligned to the reference space coordinate system.
These boundaries are also obtained from reference space excursions and can thus cause uncertainty in the spatial relationships which need to be checked at a lower local level.
Interpretive Geometric Models
A wide selection of three-dimensional techniques are currently available for the geometric description of engineering components.
These range from wireframe models, through surfaces to full solid geometry.
All of these techniques can be used with the spatial approach to provide various levels of integration.
Spatial modelling can be considered as providing initially two levels of crude solid model; the first being an orthogonal brick in the reference space and the second an orthogonal brick interpreted in the local coordinate system.
If a complex hierarchical series of sub-spaces is employed then a number of intermediate brick models will also be established.
Once the orthogonal spaces have been interpreted into the local component state then any suitable geometric model can be entered into"its geometric domain.
The type of model chosen should ideally be the one most appropriate to the solution of the problem in hand.
That is to say, that differing modelling techniques may be required at differing stages of the design.
A range of modellers should thus be made available and selected according to the needs of the specific problem being investigated.
BLACK BOX SPACES
In its simplest form the domain can contain no geometry at all.
The space then simply represents a black box.
This is a space whose geometry cannot be seen from any other domain.
It may arise because a space has been reserved for an, as yet, undefined component or because the person initiating the search has no authority to see the information contained within that domain.
In either case, relationships may or may not be specified across the boundaries or entities defined in the intersecting zones.
The black box space may be declared as a "no entry space" , with the owner of that domain being the only person to see the internal geometry and handle its functional associations with all other domains.
Here all infringements of that space from external sources are not permitted.
An "open" black box space is the term for a space where an  undrawn object is declared to exist.
Interfaces into that space are permitted but the functionality remains unchecked as geometric entities exist in only one intersecting sub-space.
No agreement can thus be reached about the use of that space and its correct functioning; the interfacing geometry cannot be finalized and changes may need to be made in order to remove violation once construction has taken place within the black box.
PSEUDO THREE-DIMENSIONAL LAMINA MODELS
With the spatial approach, the initial relationships between objects are established by the interpretation of the local orthogonal domains or bricks (see Chapter 5).
The simplest check on internal geometry is made (as described in Chapter 6) by obtaining the primary silhouettes in the three orthogonal directions.
These can be used to establish the effective and correct relationship of objects in the intersecting domains.
The non-clash of parts can be established if any one pair of silhouettes do not cross.
Crossing silhouettes in all orthogonal directions indicates that the problem cannot be bounded by such a simple interpretation and further investigation is needed before the certainty of a clash can be established.
These primary silhouettes can thus be considered as two-dimensional lamina representations drawn on the orthogonal planes of the geometric domains.
This can be thought of as entering the three main two-dimensional views (front, side and plan) into the space to lie either on the axis or on the surface of the local space brick (see Figure 3.6).
Whilst such an interpretation of three-dimensional spaces may create a slightly confused image when all three laminas are visible, it is perhaps the first step towards full modelling.
Full spatial relationships can be obtained and checked in their orthogonal views.
The approach thus allows the draughtsman to enter his normal two-dimensional views of plan, front and side without the need to be taught how to handle and enter three-dimensional data.
He can then enter information in a familiar mode and extract and handle many of the main features of three-dimensional interrelating spaces.
WIREFRAME MODELS
The wireframe model is the simplest interpretation of a true three-dimensional object.
Here the object is described by its edges and is therefore similar in form to a normal engineering drawing or sketch.
The main problem of an edge interpretation is that some form of intelligence is necessary to add the material between edges and so remove the lines that are naturally hidden by the surrounding solids and surfaces.
As there is, mathematically, simply a series of three-dimensional lines and curves assembled to rep no intervening surfaces or solids behind which lines can hide.
To produce hidden lines, areas of the assembled picture have to be mapped, in order of their distance from the picture plane.
This is to allow the nearer ones to write by In-filling â€” over the previously drawn further ones, or by the construction of silhouettes that restrict the construction of ones further from the drawn front facets.
These operations can be both complex and time consuming.
A large proportion of current CAD systems therefore operate in a wireframe mode with no automatic hidden line removal.
The views constructed in this way are often ambiguous and require interpretation by a skilled operator.
The use of spatial domains with a wireframe model provides a means whereby entities can be selected by their relationships to chosen domains.
Entities living in, passing through or avoiding sub-spaces or intersections, can thus be found and displayed.
This reduces the number of entities displayed and hence lessens the confusion.
The designer is left to handle only those lines and curves that can influence the design within the specified domain.
By careful selection of the spaces the number of entities can be reduced from literally thousands to just the important few (see Figure 3.7).
SURFACE MODELS
The first and most obvious extension of the wireframe model is through the addition of surfaces.
These may take the form of plane   and ruled surfaces or surfaces of revolution defined between the boundary entities; this group of surfaces defines simple geometric forms.
Complex free-form surfaces can be constructed using Bezier curves, B-splines, Coons patches or the like.
The first group can handle the majority of regular shapes found in normal engineering components and structures.
The second is directed towards the sculptured shapes found mostly in the aeronautical and motor industries.
A body within a spatial domain is made up from a combination of edge and surface descriptions.
Whilst volumetric information can only be inferred, the full visual appearance of the solid object can be generated.
The intersection of surfaces can then be calculated.
The excursions of the domains can thus be considered as simple flat surfaces existing in the local orthogonal plane.
Surfaces existing within a domain or sub-space can thus be "trimmed" by the specified range in the coordinate directions,(see Figure 3.8).
Sub-surfaces are thus produced.
The functional association of two domains can then be interpreted through a hierarchical search extending down from  the initial checking for the intersection of geometric domains, through an entity or edge condition check, into that for the relationships of the sub-surfaces contained within the spatial intersection.
The interference of one surface with another can be reduced to handling only those sub-surfaces where possible interference exists.
If the two sub-surfaces cross then an interference "foot print" of intersection can be calculated (see Figure 3.9).
For the two bodies to be declared as interfering it is sufficient to find only that any surface of one body has an intersection with any of the surfaces of the second, within their boundaries (including holes).
If a search is to be conducted to find whether a pin has been successfully entered into a hole in a block then non-intersection, but possibly touching, is sought.
All surface relationships within the domain of intersection must be checked.
When the pin misses the hole, but enters the block then only three surfaces exist within the sub-space; for the pin its circular end and the inserted portion of the cylinder whilst for the block there exists only a single outer surface (see Figure 3.10).
An intersection can thus be established to exist between the cylinder of the pin and the surface of the block within the bounds of the intersection domain.
With the pin correctly assembled into the hole then no interference exists, but touching may take place between any or all of the relating surfaces.
The intersecting domain will under extreme conditions only contain the two surfaces describing the pin, whilst under close fit conditions will also contain elements of both the cylindrical and end surface of the hole itself.
The block surface is ignored as the cylinder is initially checked to establish that it  successfully passes through the negative surface defining the interior boundary around the hole.
The case of a force fit of pin to block can be recognized as the intersecting domain contains at least two pairs of intersecting surfaces (see Figure 3.11).
The cylinder of the pin interferes with the surface of the block whilst the cylinder of the hole interferes with (or touches) the circular end of the pin.
The degree of interference can then be checked by comparing these curves of intersection with the enclosed or surrounding curves of surface boundaries for the respective bodies.
Whilst this method can handle extreme conditions or irregular bodies and oblique assemblies, the normal assemblies of objects of circular section can be quickly checked by a comparison of the diameters of their cylindrical surfaces.
Such techniques can be applied to establish clash and function for a wide range of engineering assembly problems.
SOLID MODELS
Currently two main methods of describing a solid are in use in CAD systems.
A solid modeller may employ either or both in an attempt to construct a general model definition.
They are commonly termed constructive solid geometry or boundary representation.
Boundary Representation
This grew naturally from the edge and surface description modellers  by the addition of procedures for ensuring that the object is fully defined by surfaces, and by giving these surfaces an "inner" and "outer" side.
Using these means the enclosed volume may be declared to contain material and thus conforms to the conditions necessary for the definition of a solid.
Models are thus constructed from volumes built from nodes, edges and surfaces and can represent such free-form bodies as, found typically in the automobile and aircraft industries.
To aid the construction of complex engineering shapes, most systems support, in some form, the ability to sweep two-dimensional shapes into solids.
This allows the operator to work in a similar way to the procedure used on a drawing board.
An object can be drawn initially as a two-dimensional view, with position and depth given to various surfaces and features later by working in another view.
A volume of revolution can be similarly constructed by initially generating a two-dimensional section of the object; this is then swept about a reference, centre line axis.
The swept boundary model thus provides the ideal bridge from two-dimensional drafting into three-dimensional solid representation.
This transition can be accomplished by consideration of the intermediate step of the pseudo three-dimensional lamina model.
Here lamina representations are constructed upon specified orthogonal surfaces on, or within, the geometric domain of the object.
The position and depth of various features can then be swept through the domain in order to generate the full solid.
Constructive Solid Geometry
This means of construction builds a solid out of an assembly of volume primitives that can be added, subtracted and intersected.
Such primitives usually include parallelepipeds, cylinders, cones, pyramids, spheres, fillets and torri.
Set theory is then used to define the object as a logical combination of these elemental solids.
Whilst this representation provides a very compact method of holding and handling a wide range of the common geometric forms found in engineering, it can result in a long processing time when real model edges have to be determined in complex models.
A possible edge has to be compared with all other primitives before its existence as a viewed model edge can be established.
Some versions of this modelling procedure use a process akin to the geometric domains to box each primitive.
This reduces the number of primitives to be compared by establishing those that intersect with the one under consideration.
One such system is based entirely on descriptions made up from planar half spaces.
These are then assembled from an operator-tree data file to provide not only  the local geometry but also the geometric domain.
Thus, for a specified sub-domain it is only necessary to consider and assemble those primitives that intersect with that space.
Such a procedure could be extended to provide full spatial and functional modelling.
Solid modelling thus allows the domain handling approach to be extended from the initial gross object definition level right down to the elemental description of local geometry by use of primitives.
The same basic processes can be applied throughout, with the final level of operation chosen automatically by the bounding requirements of the specified investigation.
Using this procedure, the problem of establishing whether the pin fits in a hole in a block can be resolved.
First the intersecting domain between the two objects is calculated.
This domain then yields the primitives of both models that can relate.
If the functionality has been defined as being "a solid into a void" , these primitives can then be found and their spatial relationships checked.
Such procedures provide the basic requirements for the construction of a knowledge-based designing system.
System Configuration
Software
The true nature of design requires that vague concepts are handled and gradually manipulated until preferred values and forms emerge.
Whilst the geometric values may not be absolute or unchangeable, the concepts and functions they represent provide boundary conditions on the acceptable ranges.
Current CAD systems handle the numerical values and their interconnection without consideration for the underlying ideas and purposes.
These have to be inferred by the user, guided by his own observations, knowledge and experience.
No reference document of function exists other than that contained in the original design specification.
The design procedure described here is based on a technique of mapping the functional requirements on to the geometric domain of the object.
Two distinct forms of data are thus handled and stored.
The function is retained as relationships, existing in the intersection between domains that specify the geometric requirements, either directly by rules or indirectly through a controlling set of programs.
The traditional geometric values of the model are handled and checked by the functional relationships and used in the pictorial constructions.
The software configuration must therefore include an additional level of operation over the current systems.
Normally geometric data is entered directly into the system by calling up the appropriate entry command and responding with the necessary parameters and syntax.
In the system described here, spaces are declared by naming and their purpose specified before any geometry is entered.
Under such a system it would not be possible simply to "design a bracket" .
It must have some declared function.
If it were to hold a known instrument off a bed casting then this would need to be declared; ie "design of a bracket to support instrument off bed" .
The two domains "instrument" and "bed" would then be sought within the list of existing domains and retrieved, or added if found not to exist.
As the domain "bracket" is declared to relate to these two spaces, intersections "bracket-to-instrument" and "bracket-to  bed" would be generated within the functional domain.
These relationships can be further refined down to an entity or primitive level in the intersection between the two geometric domains.
A bolt declared in the "instrument" domain may be specified as aligning with a hole declared in the "bracket" .
The size and position of this bolt and hole are as yet undeclared; the only specification is that they must fit together when drawn, so a hole of the wrong size or in the wrong position will be automatically reported.
This leaves the designer with the choices of moving the hole, moving the bolt in the instrument, moving the whole instrument, or declaring a new relationship (the bolt is to go in another hole).
DESIGN ANALYSIS
The procedure is one of operating in a design searching and generating mode above the normal CAD graphics level (see Figure 4.1).
Here the entry into the system is made by the statement of a design activity or request.
The declaration that two parts assemble together will result in two levels of activity.
First the existing geometric domain relationships will be checked to see if the relationships already exist and, if not, whether their acceptance will violate any other existing relationships.
If new, and acceptable, they will be entered.
The system then moves into the second level of activity by enquiring as to the nature of this assembly.
The designer is free, at this stage, to specify this simply in terms of relationships between the global domains, such as just "touching" .
He may however wish to go down to a detailed level, in which a sub-component of the domain is specified as having a fixed or moving relationship to a component or primitive of another domain, such as one "slotted into" the other.
These new relationships may or may not affect the physical arrangement of the structure or artefact being designed.
Any geometric changes should automatically result in a change to the pictorial view being displayed on the operator's workstation.
The amount of change displayed will depend on the influence of those new relationships and the level to which the operator wishes to view them.
Should the change in relationships bring about an unexpected clash with yet another component domain, then it may be sufficient to display only the excursion boxes.
At this stage the designer may have enough information and wish to move the domains apart.
He may alternatively request that the view be detailed to a lower level, in order to ascertain whether or not a geometric clash actually occurs.
Various levels and regions of viewable data are thus definable by the operator.
Searches for established relationships are also performed in a similar hierarchical manner.
Initially, the checks are performed at the model domain level, filtering down to a local geometric or primitive level wherever necessary.
The check is terminated whenever the bounding approach either proves that the specified condition cannot occur, or establishes that the condition can Occur at the level of original definition.
Searching may thus cease at the first level or spread down and out, through the analysis of the primitives or entity geometry, into a fine check of a region of local geometry.
MODEL INTERPRETATION
The nature of the original problem and its formulation will thus dictate the level and type of model to be used and displayed.
The quickest and easiest representation of a three-dimensional model is provided by the edge interpretation of the wireframe modeller.
This approach becomes difficult to use and understand when a large  number of entities are displayed or when knowledge of the surfaces or solid parameters is necessary for the problem solution.
Conversely, there are many cases where the computation times for surface and solid modelling are long, whilst providing the designer with no greater insight into the problem than the wireframe interpretation does.
The type of model employed in an activity should thus be chosen according to whether it is appropriate to the problem in hand.
Geometric data is usually stored as a combination of coordinates and associated topology.
The topological instructions can be written as a hierarchical framework allowing edge, surface or solid representations to be constructed from the same group of nodal entities.
This approach does however force the wireframe modeller to work at a higher level of understanding than exists in most present systems.
The geometric entities of line, point arc, etc need to be assembled to provide a simple surface or facet representation.
Such an approach is thus seen to provide a linear interpretation of a true surface model.
The declaration of a solid-void side to the surface leads directly into boundary representation and faceted half-space modelling.
As a means of establishing the specific.problem, and therefore the level of model interpretation, a quick look at the local geometry may be accomplished using the wireframe edge representation.
An intersection of two models will require analysis based on a solid interpretation, whilst the intersection line between two objects will depend on surface representations.
Again in a design-based system there is no reason why differing model forms cannot be used to provide differing pictorial displays of the same data.
Some design problems may be easier to visualize in a mixture of edge and surface representations.
The designer may be kept aware of other objects intruding into his space by excursion or wireframe descriptions, whilst working on a solid or surface model.
A surface of intersection displayed within a wireframe may clarify a problem area.
It is thus proposed that the view representation need not be as complex as the analysis model, but only of sufficient detail to fully explain or show the requested solution.
The display will thus be of equal or lower model quality to that used in the analysis.
An extreme case of this approach is one in which solid models are required to interpret the local geometry when searching for a clash between two objects.
If no clash is found then the lowest graphical representation necessary to satisfy the designer may simply be a text string saying "no clash" .
Should more detail be required then it could be requested by asking for minimum separation or the display of the region local to that minimum.
The software configuration should thus be capable not only of handling geometry and running analysis programs on the data, but also of selecting the appropriate models for these activities according to the design requests and the functionality specified for those elements.
Hardware
The hardware configurations employed in CAD systems have changed continuously over the last 20 years.
This has followed the advances in computer technology, from the mainframe through the mini to desk-top micros.
Currently the market is supporting this complete range of computers, extending from large centralized processing power, with many user workstations, through to the single user micro-based facility.
The advent of the networking procedures for linking stand-alone systems has provided a means whereby the role of the CAD system can be rethought.
This together with the increased computational power available, at greatly reduced cost, has made it both technically and economically possible to distribute specialized computing facilities throughout a factory (or group) on a network.
At present such networks are used on a "personal communications" basis rather than a "process" basis.
Information resident on one system can be requested from another.
Completed data files can be sent to a single bulk storage system or to the node containing the printer or plotter.
THE DESIGN PROCESS
The manual design process is itself a network of interrelated activities.
Elements of the design are developed or resolved in a series of local activities.
Design concepts are formed and tested before being passed to the drawing office for detailed interpretation; requests for support or guidance are passed between the design and engineering departments.
There are thus two levels of data transfer: management information and requests, and the handling of engineering details of the design.
This can be seen as a system for design in which the mapping of function on to the geometric domains is raised to the next level in which the requirement to manage and control the process is mapped on to the sub-processes or departments.
This two-level process has evolved naturally during the development of the manufacturing industry.
Whilst some details should be rethought in the light of new technology, its basic ideas still remain sound and  must be implemented in any design and manufacturing establishment.
These should be built into the networking procedures.
The proposed system comprises such a network, connecting special-purpose and general computers, communicating through a management protocol which has access to engineering information.
The main communications network should not carry or traffic engineering data indiscriminately; this type of data should only be provided against requests that have themselves been authorized.
The purpose of the management network is to mimic the existing control and role-playing activities of the manual design process.
Nodal Units
Each terminal node or group of nodes on the network represents an activity area or department.
Controlling instructions and supporting data are entered into them, and each passes internal design activity and externally communicated management responses and data to other design activities.
These terminal nodes can thus be configured to perform the specific set of activities they are required to carry out, allowing the arrangement of geometry-generating workstations to handle and manipulate increasingly large graphical models.
An analysis node may be tailored to operate on large matrix structures, specifically for the finite element analysis of stresses.
Others may be constructed to store, retrieve and sort large quantities of commercial and technical information.
Such a system allows the computer-based design system to be fully integrated into the industrial environment, with the result that the network supports design activities in a manner similar to the procedures described here.
All expertise in a particular technique or on a certain topic can be gathered together in one place, and the level of collective knowledge can then be ascertained, supported and made available.
Conversely, however, the current process encourages the collection and storage of information by individuals on a local level.
No common standards for design can exist, with the result that the learning and selection process is repeated many times with differing levels of success and understanding.
In many design departments there is not a continuous need for a particular skill or technique.
They thus tend to be re-learnt for each occasion with people using slight variations and interpretations.
A single node designated to handle this activity would provide the understanding, support, records and consistency that would be required.
Consequently, some nodal units should be set up to provide a supporting role through downstream activities such as analysis, whilst others act as upstream support by providing a  library-type function, in which data relevant to the background of the design, and company practices, reside.
Yet a third type of relationship exists between nodal systems when a checking activity is also included (see Figure 4.2).
This operates in a supervisory role to monitor the progress and acceptability of the proposed design.
It then takes over the responsibility for verifying the design activity against activities and components already undertaken and designed.
Completion of the specified activity, and authorization to release data and proceed, thus resides in the monitoring process.
These conclusions are then communicated to the central management node via the network.
Workstations
The design activity itself will need to communicate through the network in order to accomplish its set task.
This process will include retrieving and checking existing data, accessing designs from differing workstations if the domains intersect and consequently  relating and checking company standards.
Additionally, the activity will need to initiate data generating and checking processes internally to establish model boundaries and ensure they are not violated.
The connecting network thus handles both levels of data transfer through the initial step of passing management-type requests which can pick out the necessary engineering data for the problem solution.
In order that a workstation on the network (see Figure 4.3) can be used for a required purpose, that purpose must be found to be in agreement with the overall management plan.
A request is thus sent to the management monitoring process.
An acceptable reply not only allows the activity to commence but also releases the necessary data from the mass storage unit and establishes access to all other relevant design activities and data.
Throughout the activity, requests for verification and information on the various aspects of the design may be routed out into the network.
Questions formulated at the workstation will initiate searches at the library node.
The degree of success, quality and quantity of data can then be requested from the workstation.
Limits may be imposed on the amounts of data that can be trafficked at certain periods of the day, forcing the designer to re-configure his search to produce a more precise response or await its arrival "in the mail" .
Similarly, requests for calculations or analysis will generate a response that requires mass data to be extracted from the model on the designing workstation.
The amount of pre-processing and speed of response will again depend on the size of the analysis and the capacity of the network.
Simple calculations of boundary conditions may be performed interactively between nodes, whilst major studies may be "mailed" in both directions.
Conclusion
Using such an arrangement of hardware and software it is possible to construct a computer-based designing system that meets all the needs of the design and manufacturing process.
Built into the system is a structured modelling process that can be configured according to design requests to provide answers to design problems.
These models and requests can be communicated throughout the network to specialist nodes containing data and techniques whose purpose it is to establish those answers.
The addition of a management controller and monitoring facility allows the individual design activities to be integrated into a total design process.
This can then interface directly with the company's automated manufacturing facilities to provide the complete computer-base engineering environment.
Chapter 5
Design Records
Hierarchical, Networked and Relational Data Bases
The development of a successful design-based computing system is fully dependent upon the type of data base employed and its accessibility.
Data base systems have been available for many years and were developed to make efficient use of secondary storage devices in large computer installations.
There are many important advantages in adopting such a system (these were summarized by Date) such as: 1) redundancy can be reduced, 2) inconsistency can be avoided, 3) the data can be shared, 4) standards can be enforced, 5) security restrictions can be applied, and 6) integrity can be maintained.
In a conventional non-data base system, each distinct application maintains its own files, often with considerable redundancy.
In data base systems this is reduced by integrating separate files in order to provide a wide range of information  retrieval dependent on the user's requirements.
By adopting these principles and developing an integrated engineering records data base it is clear that the performance of a CAD system can be enhanced and the information generated used as the core of all downstream manufacturing operations.
METHODS OF DATA BASE CONSTRUCTION
Three forms of data base construction can be applied to the handling of design information; these are known as hierarchical, network and relational.
Each has its own advantages and disadvantages and have thus found their own areas of application.
Their suitability to the bounded approach to design can best be illustrated by the comparison of their handling of the following  assembly breakdown problem most often found during the scheming phase in the design office.
Here perhaps the simplest assembly situation is examined.
The assembled unit (denoted as A1 in Figure 5.1) is made up from two sub-assemblies which in their turn are comprised of a number of individual component parts.
The Hierarchical Approach
If each component part is uniquely defined then the relationship is simple and can be held in a hierarchical data base.
In such an approach all individual elements live within a tree structure as shown in Figure 5.2.
The top-down nature of this structure dictates that there is a single "root" .
Whilst each element may point to many elements at a lower level, it can have only one "superior" .
The linking of the elements thus takes on the only allowable form of "one-to-many" .
Most drawing records systems use this natural hierarchical form, but problems arise which have to be handled by additional levels and cross checks.
The first problem is encountered when the sub-assemblies use common parts; say part PS is the same as part PI.
This can be accommodated by providing a pointer or note at PS indicating that it is in fact PI.
Alternatively, a copy of the details of PI could be duplicated into PS.
Either way, the part PI is seen to point to more than one superior which, with others, will lead to a "many-to-many" set of links.
There is then more than one way of returning to the root, so that some elements of the structure can be missed in a search by the choice of the route taken.
The simple dependence of the hierarchical system is then broken.
If additional data about the components is to be stored, such as the supply source, then an additional level must be included by providing a "source" file for each part (see Figure 5.3).
In such a system the name of the supplier is only accessible down the tree.
To establish how many suppliers exist the data must be extracted from each component file and correlated.
This is seen to be further complicated by a part such as P4 where the component can be obtained from two separate sources.
Some assemblies of the unit Al can thus contain components from two sources whilst others come from three.
The hierarchical structure that can handle such problems is becoming complex and   cumbersome, as many checks must be performed in order to maintain consistency of the data and the form of its accessibility.
The addition and removal of sub-assemblies and components from the tree may also create difficulties as jumps between "branches" may be inadvertently created or breaks produced making the data inaccessible through the tree structure.
The Network Approach
In a network all related elements may theoretically be connected in a "many-to-many" form.
Records containing elements of the major groupings are thus created and the relating links between groups constructed (see Figure 5.4).
This approach thus represents an extension of the hierarchical system and can be considered to simplify down to such a system when each of the superior states are considered in turn.
To enable the data base to handle this multiple tree state a connector record must be established in addition to the element records.
This details the acceptable forms of the linking that can take place by a set of pointers relating elements and routes through the structure.
A search of the connector list will thus allow the number of upstream and downstream linkages to be established for each element.
Multiple sourcing and multiple usage can then be easily established.
The addition and deletion of elements and relationships can be easily accommodated.
The supplier of a now unused component can still be established.
Changes in the use of a component or its source is handled solely through changes in the connector listing if new elements are not required.
The Relation at Approach
In this system the connector arrangements are used to fully describe the structure.
Tables of these relationships are thus established between groups of "attributes" .
The individual relationships existing between two groups of attributes are described as "tuples" .
In the  assembly example shown (see Figure 5.5) there are six tuples connecting the attributes of sub-assembly and components, and again six between components and sources.
Additional elements can be created for any attribute simply by declaring it to be a member of that set.
New linkages, changes and deletions are accommodated by the addition or modification of a single tuple.
CHOICE OF DATA BASE
In considering which approach is to be used in the design-based process, it is necessary to take into account which structure is best suited to the storage, modification and retrieval operations to be evaluated and their frequency of use.
If a heavily "pointered" structure is applied, then this will need to be internally created from a standard sequential or indexed file, if frequent access is likely.
This will mean that all data will be stored in memory, speeding access times.
If the data base is accessed infrequently, then creating an indexed file (for relational data bases) or direct access (for pointered files) file will be more effective, removing the need for data structure creation on program initialization.
Another point to be considered is that if a virtual memory operating system is to be used, once the data tree has reached a certain size (known as the working set limit) variables created early on in the initialization will be written out to disc.
If these then need to be accessed via tree searches (a structure not particularly suited to virtual paging mechanisms), more paging will result, necessitating many disc accesses, possibly not many less than would be required in a pure disc-based file system.
The Hierarchical Engineering Records Management System (HERMS) data base
The HERMS data base reflects the hierarchical component assembly found in any typical mechanical design (see Figure 5.6).
This  illustrates the relationship between associated components in an assembly by a tree structure and a standard bill of materials sheet.
HERMS captures this associated data and adds to it spatial data generated in the CAD graphics data base.
The HERMS file structure is shown in Figure 5.7.
In this the five records have been assigned to contain: part number, nodal position, enclosing box excursions, attributes and description.
These records  describe both the associative and spatial relationships between all the component parts.
The number of tuples in each relation is again a function of the component parts, with the first or "higher order" tuple being reserved for data specific to the parent assembly.
The primary key is "part number" , hence the number of tuples corresponds directly to the number of different parts in the assembly (and not the total number of all parts).
Both nodal position and enclosing box excursion domains are divided into sub-files recording, in the first case, the XYZ coordinates of the parts position in space relative to the specific assembly/sub-assembly origin.
The box excursions are merely the six XYZ maximum/minimum extents values which correspond to the parts enclosing box; again, these are held in assembly/sub-assembly coordinates.
Hence, the enclosing box excursion domains can be extracted and investigated yielding the spatial relationships between member parts.
Likewise, by considering the nodal position file, the spatial location of components can be investigated.
The attribute file refers to part classes allocated according to the source of the component: unique, base part, made from, and variable have been defined as four fundamental classes and help  simplify the CAD data base by reducing duplicated data stored about similar parts (see Figure 5.8).
For instance, when an existing part is modified to produce a new part only the modification is stored along with a reference pointer back to the original part.
This is a separate binary relation which is created using the project and join operations to generate a simple linked list to access required CAD graphical files.
The "higher order" tuple is the header in each relation (sub-assembly).
This refers to data about the sub-assembly itself.
The  two most significant files at this level are node and box, for these contain the complete assembly/sub-assembly enclosing box coordinates together with its nodal position in space.
The higher order tuple is then passed up to the next level when the related assembly is graphically inserted into the total machine space.
Hence, by performing the joint operation on a number of inserted assemblies the whole machine contents can be recalled.
The HERMS structure, therefore, is a combination of relational information being held at hierarchical levels representing assemblies and sub-assemblies occurring in a machine.
Information can be extracted from the data base at various levels, each containing more detail as searched down through lower levels.
The HERMS data base is established parallel to the turnkey system graphics data base, providing the necessary information to relate the separate CAD part files together as components are designed and inserted into assemblies.
This relationship is shown in Figure 5.9.
To allow further uses to be made of this configuration another data base structure is required.
HERMS allows designers to record    associate information about parts, ie which parts are assembled together and where they live in space.
For a true design data base to be established more information needs to be available than just these associations.
Specific data needs to be recorded about piece parts, allowing both the graphical representation and technical data to be clearly defined ready for efficient recall when required.
To facilitate this the CAD part files are organized to provide the required data structure.
This fundamental requirement was established some years ago and is achieved by creating work, spatial, engineering and technical sub-files with the CAD part files.
These sub-structures give efficient and fast information recall by partitioning the data base into a defined structure.
The design data base structure is thus based on two important features: 1) The HERMS data base which records associative and spatial relationships of parts when assembled together.
2) Structured CAD drawing files which allow quick access to specific geometric detail and associated technical data for individual piece parts.
The Use of HER MS in the Drawing Office
The key to any data base system is information retrieval, and this is precisely how HERMS helps the designer.
It gives him the ability to check the validity of his design by checking the spatial relationships between assembled components.
A series of components can be checked in a simple manner to see that they can be assembled together, making use of the enclosing box for each part.
Interference conditions can be quickly checked with a simple expression to test for any of the four possible interference states: remote, touching, interfering, and inserted.
The most common search is that of checking a part against all others in its own assembly.
This is performed automatically from the menu by a program checking the box coordinates against all others.
On detecting a possible interference condition the primary silhouettes are echoed into the boxes for the designer to complete the search by visual examination.
The search can be extended to check the selected part against other assemblies.
This makes use of the HERMS hierarchical structure (see Figure 5.10).
The program moves up a level to the assembly file and checks for possible interference between the selected part and other sub-assemblies contained within the assembly.
If this check is positive, the program proceeds to drop down a level and search the new sub-assembly checking the box   coordinates of each part against the selected part as before.
This type of interference checking is simple, fast and thorough.
It rules out 85% of possible clashes and leaves the designer free to concentrate on the remaining 15% of cases.
This is illustrated in Figure 5.11 which represents the model of a simple pulley block and shows the problems of detecting interference between the axial pin and slide plate with and without the HERMS approach.
By creating dummy assembly files with varying nodal positions at incremental time frame intervals it is possible to model the kinematics of a mechanism.
Techniques have now been developed (see Chapter 7) and, by employing the interference detection techniques discussed earlier, they can be used to help detect clash of a moving mechanism during operation.
Another problem designers encounter can also be addressed by HERMS; this is checking tolerance build-ups in assemblies.
The positioning of each part node becomes important here since they are used for attachment points (see Figure 5.12).
When an assembly is created, component parts are inserted using these nodes and the   POINT modifier, hence separate components are assembled by chaining the nodes together.
To check tolerance build-up and possible resultant clash maximum/minimum enclosing box conditions are used.
The system defaults to nominal by using a program that combines these boxes using either specified value.
A prediction of the position of the final component in the assembly is thus generated.
The analysis gives a maximum condition so generating an envelope of certainty (see Figure 5.12).
This test could be extended to include statistical analysis of manufacturing accuracy to associate a weighting against the envelope of certainty thus enabling confidence limits to be established, and the correct combination of tolerances specified.
Part location is improved as the spatial data recorded in HERMS can be used to find parts by: I) specifying a position in an assembly and an enclosing search field, 2) specifying the maximum volume of the part expressed in extents values (XYZ), 3) similar to 2 but by delivering a ratio between two orthogonal extents values, ie slenderness ratio, 4) by choosing a known part and then checking for all parts that have a specified class of interference (or separation) with the named part, and 5) combinations of I â€” 4.
Together with the above spatial interrogation, parts can also be located by part number or description as in the traditional manner.
Assembly Records
Design is an iterative process that combines many sub-activities.
Theorists have categorized these activities into a sequential series but in practice they produce a complex interrelationship (as shown in Chapter I) that is influenced by both a company's products and structure.
To achieve a successful design many parameters have to be considered, and thus can be classified into two distinct groups: subjective factors and objective factors.
Subjective factors are not easily quantifiable and include such parameters as: style, shape, and relationship with other parts and products.
These factors reflect a company's attitude to its market and products, the designer's style, current trends and the influence of competitors.
These subjective factors open up the number of variations that need to be considered and hence leads to an underconstrained design situation that can stimulate major changes in product concepts.
Objective factors, on the other hand, are easily quantified and characterize an overconstrained design environment.
They promote a "traditional" approach to design problem solving, centred around analytical techniques which are directed towards reducing the number of alternatives that can be considered viable.
Objective factors include such parameters as physical properties, operating conditions and cost constraints.
Overconstrained designs tend to become a compromise between these well defined parameters, which generally leads to low-risk, slow product development.
Most design environments encountered contain a mixture of both these parameters with bias depending upon the company's activities, as defined previously and illustrated in Figure 5.13.
Typically companies designing for automated assembly fall into the central band shown in Figure 5.13, and include product/ideas-based and skills/ideas-based companies, all dealing with a mixture of over and underconstrained problems.
The type of design problem is significant when considering the introduction of CAD into a company.
Conventional turnkey CAD systems use a geometric data base, storing data about single entities which combine into geometric models.
This type of data storage is useful for analysis techniques but has limitations when it is necessary to manipulate a number of models simultaneously, as in designing complete assemblies.
RECORDING SPATIAL RELATIONSHIPS
The associativity of component parts in an assembly is recorded in HERMS with a file structure that resembles the hierarchical tree of a conventional bill of materials.
In addition to the part number, quantity and description/classification details, the data base also stores the component's position in space, size and its functional relationship to other components.
This spatial data is held as a node, enveloping box and attribute (functional relativity) as illustrated in Figure 5.7.
HERMS is updated  every time a part is added to an assembly.
The associative data is extracted from the INSERT PARTS command, and the spatial data from the digitized coordinates and the inserted part's drawing file, which is a structured set of work, spatial, engineering and technical sub-files held in the CAD data base (this is fully explained in Chapter 6).
The HERMS data base file structure is arranged to store the minimum of data to yield maximum information.
Referring to Figure 5.7 again, a part that occurs more than once in an assembly only has its new node and box stored at second and subsequent occurrences.
The attribute is assigned to reduce the quantity and size of drawing files.
For example, if a new part is made from an existing part the new part's attribute refers to this original design and only the alterations need be stored as the new drawing file.
The attribute also provides security against unauthorized modification.
The header to each assembly file contains data about the whole assembly.
This data then becomes the detail in the next level of the hierarchical structure (see Figure 5.9).
By using the hierarchical tree structure of spatial and associative data it becomes relatively easy to investigate the relationship between parts in adjacent and remote assemblies.
SPACE OWNERSHIP AND ROLE PLAYING
Generally the organizational structure of a drawing/design office resembles the part structure of their product (see Figure 5.14).
This similarity suggests a relationship between a person's position in the organizational structure and their scope of influence over the design.
For example, the chief in Figure 5.15 has control over the whole machine, whereas the draughtsman only works on the fine detail of a specific part.
Up to now this demarcation of activities has only come about by delegation, no control system could enforce these roles.
Frequently, order was kept by intervention of a superior, say the chief designer.
Such intervention saw the chief playing the role of detail draughtsman to re-establish the status quo.
If we now introduce the concept of recording spatial data for a product, a method of controlling the design process emerges.
Control is obtained by allocating ownership of space depending upon a person's position in the organizational structure, allowing that person to change details only in his own space.
Hence the chief designer would control the whole product space whereas the detail draughtsman could only change details within the box allocated to his specific part.
The necessary (software) controls over space violation are achieved before entering the coordinates of new or modified entities into the CAD data base, this is a simple logical check against the pre-defined box boundaries.
More general control is by user password and pre-defined menus.
Clearly there is going to be conflict between allocated space as parts do overlap in assemblies.
It has been shown that it is in situations where a number of design teams are working on separate projects that have to be mechanically joined, that the majority of assembly errors occur.
It is critical that the two teams know what each has designed around the interface zone, for the project to be a success.
By storing spatial data this task becomes trivial.
A simple check shows the common area (see Figure 5.16), each team has details of their colleagues overlap area echoed on to their screens.
They are unable to alter the echoed design but can see how it interferes with their own.
If no common solution can be found neither team has the right to alter the other's design or re-define their own spatial boundaries.
The role of the inspector (see Figure 5.15) is to report the matter to the person one level up who controls the whole space owned by both teams; this person then decides on a solution.
It is interesting to observe how the usage of the drawing sub-files changes depending on the person's role.
Again, making a comparison between the chief designer and a detail draughtsman, the chief is only concerned with allocating space to designers and specifying overall product constraints.
This he does at the highest level in the HERMS file structure, defining boxes in the work file for sub-teams to work within and inputting technical details as text in the technical file; this latter entry could be considerable.
The detail draughtsman designs parts.
These are specified in the part-technical files and their spatial constraints are entered as a box, together with relevant detail in the part-spatial files.
His role is simply to draw the component in the work area, no more.
By comparing these two roles we see a change in the use of drawing files.
At the top of the structure the chief mainly uses the technical (text) files to input design data, whereas the detail designer uses the work (graphical) file to create the design.
This is a process 114 The Computer-Based Design Process   that enables the chief designer to communicate design concepts through to his team without taking up the role of a detail draughtsman, giving very effective utilization of design skills.
TOOLS AVAILABLE TO DESIGN FOR PRODUCT ASSEMBLY
Good use can be made of the geometric data stored in a CAD system to check that a series of separate components can be assembled together.
With the typical turnkey system, storing data based on separate entities, this task becomes complex, if not impossible.
With the addition of a structured-parts data base, such as HERMS, this task becomes relatively easy, enhancing the system and providing the designer with a set of very powerful tools.
The most useful tool is interference checking.
Making use of the enclosing box for each part, interference conditions can be quickly checked with a simple Boolean expression to test for any combination for the four possible interference states (see Figure 5.17).
Another use of HERMS is checking tolerance build-up.
The positioning of each part node becomes important, as when checking tolerance build-up the node is used as an attachment point (see Figure 5.12).
When an assembly is created, component parts are inserted using these nodes and the{ POINT}modifier, hence separate components are assembled by chaining the nodes together.
To check interference a maximum/minimum enclosing box condition is used.
The system defaults to nominal.
By using a program that combines these boxes using either specified value, a prediction of the position of the final component in the assembly is thus generated.
Drawing Office Procedures
Space Allocation and Role
The role of the drawing office is one of formalizing the designer's idea into a manufacturable product.
Essentially this is based around choosing and then communicating the geometric properties necessary for the successful functioning of the item, together with material properties and the procedures to be employed during its generation.
These may range from the specification of shapes, finishes and material type through casting and mould details, to jigs and fixtures needed during production.
These activities have all been traditionally associated with the construction of engineering drawings and parts schedules.
With the advent of the CAD system all of these activities need to be rethought.
The central core of working information is no longer the drawing but the computer data base.
The data base cannot be considered as a straight alternative to the drawing.
When these two approaches are compared they are found to have various advantages and disadvantages over each other.
The main advantage of the CAD data base is that it can be accessed in many differing ways in order to present the solutions to various design problems.
Compatibility of information is thus maintained throughout the design operation.
The great disadvantage of a CAD system is that it currently has no data structure.
All geometric and textural data are held within a part file that closely represents a dustbin, thus information cannot be selectively retrieved; a piece of an object can only be viewed by displaying the whole part file.
Only after the file has been loaded can the operator select fields of view and identify entities.
The other major problem caused by a CAD system arises from the ease with which data can be created and stored.
The system quickly becomes overloaded with files, no matter what size of disc storage is provided.
In a manual drawing system the number of differing copies held within the store is limited by the physical effort and time that the draughtsman has available.
The cost of maintaining these additional versions is extremely small, being based on the spaces occupied within a filing cabinet which must be  serviced and kept warm and dry.
There is no penalty based on the amount of redundant information contained on that drawing.
However, within a CAD system not only is there a temptation to keep lots of versions of the same part, but every entity stored costs something to maintain throughout its natural life.
Discs get used up, so backups must be made, filed and maintained.
Sometimes a vast organization is needed to handle and ensure reliability of this data.
Often the proportion of useful to redundant data being stored can be very small.
The "useful" data is only that which is necessary for the complete construction of the mathematical model.
Due to the way the data is stored, the dimensioning on the drawing usually creates between two and three times as many entities as are used in the original model.
If it is the practice to add standard drawing blanks to each part file this again can use on average as many entities as the model.
The greatest cause of redundant data however is the inclusion of the company logo; this has been known to be as much as an order of magnitude greater than the average model.
In a worse condition, if a company allowed up to five versions of any drawing to be saved, with drawing blank and logo â€” as much as 98 per cent of redundant data may be being stored and maintained.
THE DATA STRUCTURE
In order to utilize the available computing capacity of a CAD system most efficiently, the structure of data storage becomes a critical factor.
Likewise, by efficient data storage the user benefits from having a system that gives him relevant information quickly.
Many industrial systems studied have simply stored drawing information in a large library file, listed in numerical order with no link between associated parts.
The basis of the design procedure is a hierarchical structure of files that groups parts into their parent subassemblies.
These in their turn are grouped into assemblies that make up the total product/machine.
This tree structure exists for each product within a company's range.
Individual components are held on global "where used" files providing a linked network of information.
File Structures
Drawing Files
The drawing file structure at part level is divided into four fundamental sub-areas, these being the work, spatial, engineering and technical files (see Figure 6.1).
Strict protocol exists as to the allocation of data to each sub-file.
This is carried out along the following lines: Working Space.
All geometric constructions and pictorial inputs are performed initially in the working space.
This is effectively a sketch pad area where ideas can be tried out and refined.
Multiple drawings can be inserted in order that alternative arrangements may be considered and compared.
If the workspace is being used by the designer it can be employed together with the technical file to convey, by written instructions, the necessary constraints and design parameters.
Once these sketches are completed the working space and technical file areas are saved.
Spatial File.
This section of the drawing file is used to store the three-dimensional coordinate relationships which define the body within the machine space.
These relationships are held in a hierarchical fashion in such a way that greater definition is achieved as lower levels are displayed.
The highest level contains only a single location point for each occurrence of the item in the assembly.
This may be considered as a node or tooling point which can be used to position and align the object within the machine space (shown in the following examples as a triangled three-axis cross with a directional arrow through it).
The next level contains information on the maximum and minimum excursion of the object in all three coordinate directions.
This data is then used to define the enveloping box which just contains the part.
This is then the geometric domain of the object.
Lower levels are used to retain successively the primary silhouettes, specific sectional silhouettes, surfaces and internal details.
By displaying all these lower levels together, a wireframe representation of that object can be constructed in three dimensions.
Engineering File.
Up until this point in the design, the  manufacturing constraints have been a secondary consideration.
The main aim has been to design a spatial arrangement which will provide the required performance or function.
Details indicating how this is to be made must now be entered into the engineering file.
As the spatial file contains all the geometric relationships necessary to specify the body, this can be used to generate any pictorial view.
It is thus not necessary to produce an engineering drawing specifically for the purpose of showing everyone what it looks like.
The engineering file should thus contain only the instructions necessary for the complete manufacture of the item, and can be used to store detailed engineering drawings (operations, related drawings, assemblies, etc), numerical control instructions and schedules.
If, for example, the part is to be produced by a completely automated process no formal engineering drawing would be necessary.
The file may only contain NC details and a set of checking instructions.
The engineering files are thus seen to be data stores containing both man-readable and machine-readable instructions for the manufacture of the specified articles.
Technical File.
The final section contains the technical design data.
With this arrangement it is possible (and desirable) to keep the manufacturing details and the technical considerations together in the same file.
Corruption of the design is then less likely as "flags" can be set to refer the draughtsman to relevant sections in this file.
It is envisaged that this section will contain text files (instructions from the designer, component purchasing details, etc), equations for calculating features and relationships, as well as pictorial data.
The graphics capability can also be exploited to the full by constructing design nomograms in this space which can then be accessed by the drawing office staff.
It is also through this file that programs can be evoked to provide manual and automatic checks on the specified functional associations (see pages 67â€“70).
Design and Checking Procedures
When this system is in use it is intended that all members of the design team will be allowed to view and manipulate some of the filed data, but not necessarily all of it.
Whilst all can be accessed via the keyboard, it is planned to provide each member with an individual menu containing all the functions necessary to carry out a prescribed set of activities.
Everyone will be allowed to view the original design sketch, only the "designer" menu will allow modifications to be made to that level of data.
The draughtsman's menu will contain keys which  carry out the automatic "filtering" of geometric details down from the working space, through the spatial file, into the engineering file.
The menu will also contain functions providing the activities and constraints necessary to comply with the company's codes of practice or "house style" .
In order to check the relationships that exist between individual piece-parts and the original design, an assembly procedure is provided.
This can also be used in an "inspection" role.
By searching a data file containing all the piece-part "boxes" for geometric domains, the simple relationship between parts can be established; the boxes can be shown to be remote, adjacent, interfering and inserted.
A draughtsman or inspector will be able to search the local area around a given piece (by digitizing or constructing a "search box" ) and have the system automatically insert all the parts lying in that space into his working drawing.
Assemblies can thus be performed and interference checks made.
The position of each piece in space can be disturbed slightly or grossly to give, respectively, either positional tolerance checking or exploded views.
Function Analysis
The ability to re-position the individual components within the machine space can be used to advantage in any kinematic analysis.
Mechanism parts can be re-positioned to give a sequential picture of the complete system throughout its operating cycle.
Various positional and angular values can be retrieved and employed in the construction of elemental and system function diagrams, and then converted, using a time base, to give velocity and hence acceleration profiles (see Chapter 7).
The Master Sub-Assembly, Assembly and Machine Files
Having described individual parts in the drawing file, information must be stored about these parts when they are assembled together.
These associate and spatial relationships are held as a hierarchically structured group of sub-assembly, assembly and machine files.
This file structure is similar to the traditional parts list generated by a drawing office (see Figure 6.2).
At the bottom of the tree structure are the sub-assembly files, with information on individual comprising parts.
The part detail held is not the entire contents of the drawing file, but merely sufficient data to describe the parts' associativity and spatial positions in the sub-assembly.
The data is held as a two-dimensional array, each row representing a part in which each of the columns   containing various data about the parts.
The structure is detailed in Figure 6.3 and can be broken down as follows: 1) part number â€” which consists of a lead number and variable number, 2) description/classification â€” based on a company specific or geometric feature procedure, 3) node position â€” the global position of each component part's node, 4) enclosing box excursions â€” maximum and minimum values in each coordinate direction that describes the geometric domain of the part, 5) attributes â€” sub-divided into primary and secondary: PRIMARY:(a) Unique â€” only occurrence of this part;(b) Base â€”fundamental part used to manufacture others;(b1) Made from â€” a modification to an existing (base) part;(b2) Variable â€” special sub-set of (b1) which describes a family of parts all similar to the base part.
SECONDARY: Purchased, electrical, etc.
The first row of each sub-assembly file is reserved for information about itself: part number, description, local node and the excursions of a "super-box" which encloses the entire sub-assembly.
This row is then passed up to the assembly file, whose structure is identical to the sub-assembly file but contains sub-assemblies (SA's) instead of parts.
At the top of each assembly file is another super-box which encloses the entire assembly.
This d up to the machine file.
With this structure it is possible to do a search within a machine, passing up, down and across the tree structure to determine all comprising parts.
The final link in the file structure is the "where used" file.
 "Where Used" Look-Up Files and Parts List Manipulation
The where used look-up file provides the cross-reference between separate product trees that share common components.
At part level it consists (see Figure 6.4) of information on every part the company has used.
The type of information held is dependent upon the attribute classification, which also determines the drawing file location.
The simplest part to consider is type unique.
The where used file shows this attribute together with the master sub-assembly in which the part is included.
The part drawing file is held in the master sub-assembly file.
Base part drawing files are held in the where used file together with a cross-reference to all sub-assemblies in which that part occurs.
The two sub-set attributes of base part refer to this drawing file, as they only contain details of changes to the base part.
Sub-set variable is listed numerically after the base part, with cross-reference to the parent assembly/s.
(If there is a unique variable the drawing file is held at the master sub-assembly, otherwise the drawing file is held at the where used file).
The subset made from is handled in a similar manner except that an original part number is allocated.
As the content of both variable and made from drawing files (only) contain the variation to the base part, to view the complete part both variable/made from and base part files are regenerated.
As for master sub-assembly/assembly/machine files, the where used look-up files are extended up to record the occurrence of subassemblies and assemblies.
By using a combination of the master files and look-up files a specific composition of parts can be chosen to suit the design requirements (see Figure 6.5).
The listing which contains specific   variable parts is not stored in the main data base, but is recorded on a secondary storage medium.
Application of HERMS
The data structure chosen makes HERMS applicable to many applications by allowing information to be extracted in many different ways.
GEOMETRIC RELATIONSHIP OF PARTS
The enclosing box coordinates of each part, specifying their geometric domains, are held as high priority data in both the drawing file and specific sub.assembly files, allowing the geometric relationships of parts to be readily checked.
Interference between boxes is checked using an algorithm based on the four states of Interference; remoteness, touching, interfering, and enclosed (see Figure 6.6).
A specified part can be checked for interference within its sub-assembly by searching the "box excursion" columns of the file array.
On detecting a box interference the program gives the designer an option to echo primary silhouettes into the relevant boxes to complete a visual check.
By specifying the class of interference the search becomes selective, and so certain parts can be located considering their type of attachment.
For example, two gearbox housing castings would be a touching condition whereas the bolts connecting them would be an interferencing condition.
This procedure is not restricted to one subassembly: a part can be checked against all other adjoining subassemblies by moving up the hierarchical structure one level, an adjacent sub-assembly file and then performing the same vertical search.
Although the procedure relies on a final visual check it excludes up to 85 per cent of the possibilities, allowing the designer to use his time effectively and so optimizing the solution.
The effect of changing the physical dimensions of a part can also be investigated by using a re-defined box to check for interference.
Hence a new modification can be thoroughly inspected at the design stage to ensure a high degree of success before manufacture and installation.
The geometric relationship between parts can also be used in locating parts.
Traditionally this has been done by referring to a parts list and general assembly drawings, a long and tedious process.
With the geometric data being held, a designer can now digitize a point in space and immediately find which part is contained there.
Additionally, the recording of spatial relationships between parts is extended, allowing tolerance build-up to be simulated in either the maximum or minimum material condition to produce a "region of certainty" for final part positioning.
REDUCTION OF VARIETY
The ability to locate existing parts easily reduces the variety of components and leads to standardization.
HERMS gives easy retrieval in many ways.
The use of where used files means all parts are cross-referenced, and drawing files are located and attribute classifications, eg the variable type with its sub-set family of parts.
Recording the enclosing box allows the physical size of a component to be used in conjunction with attributes for searching.
A further extension is proposed, with the purpose of incorporating a description/classification index into the part description (see Figure 6.3).
This is to be based around a geometric coding model, similar to the Birsch system which uses an eight digit primary code to describe the characteristics of the part.
It is not intended to generate a specific code exclusively for each part but to use a code, in conjunction with the defined attributes and physical size of the part, to describe it, presenting it to the designer in a  hypothesis-based reference system.
It is felt that this approach provides a general procedure having wide applications, instead of producing a very specific "tailor made" system that can only be applied to one company.
HERMS IMPLEMENTATION ON A TURNKEY SYSTEM
The first development of this data base was undertaken on a Computer Vision system with the software written in VARPRO.
The program structure was quite simple and served to prove the merits of such a configuration.
First the drawing part file-layering convention was organized to represent that described earlier (see Figure 6.7).
The principle sub-divisions made were the work sub-file and spatial sub-file.
The spatial sub-file, which is particularly important for data base integration, was sub-divided into further levels storing nodal position, enclosing box, primary silhouette, secondary silhouette, and tertiary/section silhouettes in descending layers.
The first three layers were automatically generated from the work subfile on exiting or filing the part.
The HERMS data base was managed by a number of VARPRO programs "wrapped around" menu key file commands that inserted and manipulated parts.
On executing the graphics commands the data base text files were updated with relevant information extracted from the command containing the following details: 1) part number extracted from command, 2) position â€” extracted from digitized point, 3) box â€” extracted from the original part spatial file, 4) attribute and description from the part engineering sub-file.
Unfortunately the program performance was poor, due to restrictions in VARPRO's file-handling capabilities and limited conditional statements.
To improve the performance the use of Fortran was investigated.
This proved very difficult to use, especially as we were unable to run under CADDS using graphics commands, due to the lack of some system make files.
At that time we were also building a similar data base on another CAD system, which involved re-writing all software to suit.
Considering this fact and also that HERMS may well be interrogated by non-CAD users for reference information, we decided to build the data base on a separate computer; one that could, in time, be interfaced with any turnkey CAD system that supported RS232C communications protocol.
For this purpose we chose a Sirius 1 microcomputer with memory expansion to 768 KB.
The data base was written in PASCAL which  enabled variable records to be used for relation definition and allowed excellent storage and file manipulation capability.
The HERMS package was controlled via the communications link (ACK and NACK protocol) established between the Computer Vision system and the Sirius the principle of this is illustrated in Figure 6.8.
The CV communications were handled by a Fortran program that ran in background mode on the system managers task.
This continually looked at and responded to data being put into temporary text files by the VARPRO programs that were rested under tablet key file instructions.
The data transmission path of this system has proved tortuously slow, having to pass through three programs each way and down a 1200 Baud communication line; however, it does prove the principle.
By transmitting key commands from the CV, together with necessary data, searches of HERMS can be conducted for part clash or location directly from the CV menu tablet.
Data Transfer Standard
Further work on the transfer of CAD data between work units and independent sites has been based around the idea that it is necessary to transfer all stored entities.
The procedures operate on the lowest recognizable entities; these being the most general description of points, lines, arcs, curves, text, etc.
Various agreements have been  sought for a graphics data standard which would be acceptable to all suppliers and major users.
As with most agreements on standardization one of two possible courses of action emerge.
The first is that, as a result of continuous disagreement, time passes until one of the existing procedures is commonly accepted (simply by usage) and becomes the standard by default.
The second possibility is that, in order to achieve some measure of agreement, the standard is reduced to its lowest possible common elements.
This process of looking for individual points of agreement whilst demonstrating diplomatic skills, results in a piecemeal approach which is not targeted to handle or solve any specific problems, but addresses a wide range of problems poorly or inefficiently.
A Needs-Focused Transfer Procedure
A study of current practices has shown that the main practical problems associated with these schemes did not lie simply in the procedures whereby the entities are described and transmitted, but in the fact that they were applied non-selectively.
In order to  communicate between data bases of differing structures it is recognized that some expansion of the file is necessary.
However, it is only when a single unique format is imposed on all users that it is possible to develop the most efficient transfer code.
Due to the diversity of structures being accommodated a large increase in data is to be expected.
It is therefore sensible to compensate for this increased entity description by attempting to rationalize what entities need to be communicated between workstations and company sites.
For example, the data files on current CAD systems can be considered simply as a "bin" of entities.
Each entity, or group, is uniquely defined and has no relationship to any other in the file (except as a consequence of file order).
Neither do any of these values have any significance, in terms of their relationship, to the design process or objectives.
Rationalization is particularly important with any design decision, such as assembly or a clash with other parts, which can only be performed by reviewing the total file visually.
It is only after the very last entity has been displayed that any quantitative evaluation can be performed.
On normal industrial systems this assessment has to be performed manually by the operator.
It is only on large research machines that it is possible to perform various geometric and surface mapping techniques that can be used to handle general complex objects.
Such techniques are difficult to apply to real engineering components and must, considering the large number of complex geometric calculations involved, be expensive and time consuming.
In order to overcome these communications problems it is necessary to establish the amount of data which must be available to the designer so that he can perform a specific design function.
This will have two major benefits: first, the amount of data transferred can be considerably reduced; second, the presentation of any of the necessary information will greatly increase the designer's ability to make a correct assessment of the design problem.
Consequently, the efficiency of the total design phase can be greatly improved.
Proposed Systems Under Development
Current practices between remote sites demand that all new work is transmitted periodically between sites, or to a central data base.
The strategy which controls the frequency, duration and destination is usually set up on a systems availability base rather than being controlled by the quantity of data to be transferred and its "design delay" costs.
The procedure thus follows that shown in Figure 6.9.
The whole procedure is initiated by a demand for data arising at  the first site.
This demand may be generated through a pre-agreed schedule of transmission times or by a specific design need or crisis.
The second site receives the transmission request and establishes whether the system is available and, if so, conducts the data transfer.
The receiving station checks and stores the data.
This can then be assembled and displayed graphically in order to investigate a design situation or problem.
The system under investigation reduces this vast data traffic by first establishing a design need â€” this is shown in block diagram form in Figure 6.10.
Here the stated need is transcribed to establish what additional data is required, in order that the problem can be solved.
This is then used to formulate a specific data search which is transmitted to the second site.
This system searches and/or extracts data from its data base which complies with the request.
Only this information is transferred between sites and made directly available to the designer, in order to resolve his design problem.
Hierarchical Data Structure
In order that the design request can be formulated and handled in a systematic way, it is necessary to provide a structured data base in both site systems.
A suitable data base format, together with the necessary management procedures, has been under development for a number of years.
This hierarchical data structure, initially conceived as a method of organizing and controlling three-dimensional draughting procedures, has subsequently been developed into a general engineering management system.
These procedures address the current problem of designers only having access to either none or all of the data for a CAD part, by introducing strict partitioning within each CAD part file.
HERMS also establishes the real-life relationship between each separate part held in the system by recording associative part data.
These two features combine to provide a comprehensive data retrieval mechanism allowing access to recorded information at any level, ranging from single geometric entities to complete machine assemblies.
The partitioning of each CAD part file (see Figure 6.11) is based on the concept of every object existing within its own rectilinear reference space.
The reference space forms an enveloping "brick" described by the excursion of the object in the three coordinate directions and its reference, by a local vectored node.
Whilst each object is described as existing within the reference brick, the draughting procedure allows objects to be initially constructed within a set of temporary work layers on the company's turnkey system.
On completion of the design activity the geometric entities are re-distributed into selected layers, creating the spatial sub-file, and the work layers destroyed before filing finally takes place.
Whilst all drawn entities are eventually stored, the highest layers contain specific and well defined sets of information.
This group contains a vectored node which is located on the reference space and is used to position the object within the assembly or machine space at each of its occurrences.
The enveloping box is also retained, followed by a primary set of silhouettes constructed in each orthogonal direction by automatically driving a chain around the border.
These are followed by secondary and internal silhouettes which are used to describe special engineering features and sections through the object.
This sub-division continues until the entire geometry is described.
The process only terminates when no more entities or groups remain in the temporary work layers.
The spatial sub-file structure is illustrated in Figure 6.12, which shows the partitioning of data for a simple part.
The CAD file is further divided into two more sub-files (see Figure 6.12), these being the engineering and technical areas.
These record text data relating to manufacturing/assembly criteria and performance/structural specification, respectively, for the part.
The associative data is stored in a hierarchical file structure that resembles the conventional bill of materials hierarchical tree.
In addition to the part number, quantity and description/classification details, the data base also stores the component's positioned space, size and its functional relationship to other components.
The spatial data is extracted from the CAD part file, automatically providing an update every time a new part is added to the assembly design.
The HERMS file structure has been arranged to store a minimum of data whilst yielding the maximum information.
The detail file structure at level n is shown in Figure 6.13.
A part that occurs more than once in an assembly only has its new node shown at subsequent entries.
The attribute is assigned to reduce the quantity and size of part drawing files by using indexed pointers to merge CAD part files automatically for variable and made-from parts.
The integrity of the hierarchical structure is preserved by utilizing file header records.
Each file header contains data for the whole assembly described, the super box excursions and the nodal position.
This header data is transferred up as detail to the next level of the hierarchical structure and so on until the whole machine is recorded.
The relationship between the HERMS data base and the structured CAD part files is illustrated in Figure 6.14.
As described before, the CAD file records contain part geometry while the hierarchical structure records hold part associations.
Relationships can now be investigated, at the lowest level of structural definition, by simply establishing whether boxes are remote, touching, interfering or inserted (see Figure 6.6).
Intersection regions between   boxes are flagged to allow the designer to indicate the type of association that is to be expected; these will occur between mounted or shaped components, assembled mechanism, etc.
By employing this structured procedure the designer now has control over the data he recalls from the turnkey system.
Figure 6.27 shows a simple double sheaved pulley block made from 11 different components.
The wireframe model (Figure 6.26) regenerated from a traditional CAD data base, is, at its best, very confusing.
Representing the assembly using HERMS "highest level, the pulley is described simply as" bricks"representing the major sub-assemblies.
Further information can be revealed by interrogating the data base at lower levels until sufficient information is gained.
The subassembly relationships can thus be established with the minimum of data needing to be extracted from CAD part files.
communication standard, the amount of data traffic between remote workstations can be controlled to suit the end user's needs.
The application of these concepts is best illustrated with typical problems encountered in mechanical engineering design.
These can be broadly categorized into three areas: geometric, functional and product control.
GEOMETRIC DESIGN CONSTRAINTS
One of the most common problems encountered is simply deciding if two components in a machine clash.
Under current practice a user wanting to access a central data base in order to determine boundary conditions, will have to go through the following procedure (similar to the remote operator, discussed earlier): I) identify all relevant drawings, 2) inspect the relevant drawings to determine the required information, 3) use the information to determine interference.
Using HERMS this procedure may be rationalized.
First, general interference can be automatically tested for on the system by simply considering the relationship between respective part bricks.
A detailed interference condition is communicated to the user by sending a single control command identifying the detected part.
The user can now decide if he wishes to investigate the condition further.
As yet no graphical information has been accessed.
If the relationship between the detected parts is all that is required, the size coordinate excursions describing the enclosing brick need only be transferred.
If the user decides on a more detailed check the host hierarchical file structure is searched to give the required detail, be it primary, secondary or specific sectional silhouettes.
At each stage of searching, the data can be investigated, but before further levels of data are accessed.
To check clash, only entities in the interference zone need be selected, thus a minimum amount of data is converted, and displayed on the user's workstation.
FUNCTIONAL DESIGN CONSTRAINTS
The most basic criterion for a successful design is that it satisfies the functional constraints imposed.
These can be imposed in two distinct categories.
The first is during the initial design phase, and the second is during design change.
In the case of an original structural design, a company will be required to conform to a set specification.
During the design of a  pressure vessel, for example, the constraints to be observed may be: 1) minimum internal volume, 2) maximum size, 3) minimum number and size of flange bolts, 4) minimum wall thicknesses, 5) maximum stress concentrations.
The first two of these constraints can be checked by inspection of part spatial files containing box excursions and sectional silhouettes, respectively.
The third constraint is observed by controlling the design process at sub-assembly stage, echoing the relevant design data into component part technical sub-files and the geometric size and spacing into the relevant spatial files.
The fourth and fifth constraints are interrelated, the relationship being defined by classical analysis.
The relevant calculations are stored in the technical sub-files whilst the corresponding wall thickness is kept in the spatial sub-file.
HERMS allows a remote workstation to access any relevant detail and transfer this independently at the original CAD part file.
It also allows the initial constraints to be transferred graphically.
For instance, the second constraint (maximum size) could be defined by specifying the maximum allowable excursions and no more.
Looking at the second area, that is of ensuring the validity of design changes, HERMS may be used to control this process.
It will not only include the functional constraints listed above, but will use the product control facility in order to ensure that changes maintain the integrity of the design.
Product Control, Component Identification and Reduction of Variety
The HERMS approach has the purpose of providing the designer with information on geometry, manufacturing details, part association and description, using the file structure previously described.
This description may also contain a coding/classification, with the goal of being able to locate similar parts within the company data base.
Product control may thus be exercised as follows: 1) to provide automatically the bill of materials lists for given products and assemblies, 2) to identify part usage within a range of products, 3) to identify similarities between parts, be they in size, type or association, 4) to locate parts by their position within the reference space of the machine.
Conventionally this data has only been available from a separate source/data base.
With HERMS it is possible to transport this together with the graphical data describing a part, so that it is all available to the designer from a common source.
These methods of categorizing components and assemblies thus enable production facilities to be used more efficiently, purchasing requirements to be known more accurately and the conforming of piece-parts and assemblies to functional constraints to be maintained.
A unified common source of information is thus provided throughout the design process, allowing the company to put its products into production.
Application Examples
The basic features of the design process-based system can be illustrated by the following worked examples.
EXAMPLE I: PRODUCING PIECE-PART DRAWINGS FROM AN ASSEMBLY DRAWING
Figure 6.15 shows an assembly drawing of five interconnecting puzzle parts of constant thickness (as shown in the isometric Figure 6.16).
The five parts of the assembly are identified by the designer and the five nodes have been inserted.
This data is then stored away in an assembly file.
The assembly drawing is then called by the detail draughtsman and all the data is inserted into his drawing space.
Once he has identified the extremities of the part he wishes to detail, all the data lying outside of the component "box" is removed and the single item (in this case piece 2) appears as seen in Figure 6.17.
The remaining data is then filtered down into three spatial layers holding the node, the box and the wireframe silhouette.
This silhouette can then be inserted into the engineering file, rotated and scaled to give the working view as shown in Figure 6.18.
This can then be dimensioned to produce one of the views in the final engineering drawing.
PIECE-PARTS This shows the re-assembly of the five puzzle parts.
Their true positional assembly is as shown in Figures 6.15 and 6.16.
As the components were originally designed to fit perfectly, their correct assembly will appear identical to the original assembly drawing.
If, however, piece 2 is wrongly positioned with respect to the others, the assembly will appear as.
shown in the front view (see Figure 6.19) and the enlarged isometric (see Figure 6.20).
Figure 6.21 shows the front view zoomed in order to "measure" (an available CAD command) the separation or interference at any chosen point.
EXAMPLE 2: CHECKING AND DISPLAYING THE ASSEMBLY OF
EXAMPLE 3: THE HANDLING OF MORE COMPLEX GEOMETRY
Figure 6.22 shows the basic design sketch of the float chamber for a carburettor.
All the cylindrical surfaces are displayed only as two circles joined by a start line.
As this representation is difficult for the draughtsman to interpret, mesh lines have been inserted down   the front and side view axis (to give Figure 6.23).
This then produces a reasonable working drawing in both the front and side views.
The main body of the chamber has then been extracted and corner radii added.
In a similar operation the cap was extracted and   detailed.
The two parts have subsequently been re-assembled in an exploded relationship (shown in Figure 6.24).
The true relationship of the parts is shown in the sectioned side view in Figure 6.25.
EXAMPLE 4: A COMPLETE DESIGN ASSEMBLY PROBLEM
Figure 6.26 shows a wireframe drawing of a double sheaved, ball bearing pulley block as designed on a conventional three-dimensional CAD system.
As an assembly, the example could be regarded as trivial, being made only from ten different parts.
However, the image generated is a confusing mass of lines of little use to the designer.
Figure 6.27 shows the same part, illustrated   using the HERMS data base.
The drawing shows only the enclosing boxes for the comprising assemblies and parts in the highest, "machine" , level of the hierarchical structure.
The accompanying bill of materials listing is shown in Figure 6.28.
If more detail is required the data base can be interrogated at a lower level.
Figure 6.29 shows the two single pulley assemblies, again being illustrated as the enclosing boxes of comprising parts and sub-assemblies.
The cassette sub-assembly is common to both of the single pulley assemblies.
This is detailed at level three in the data base and is shown in Figure 6.30.
This is still a confusing drawing but as before   can be represented as either nodes, enclosing boxes, primary silhouettes, or secondary silhouettes of the comprising parts as illustrated in Figures 6.30a to 6.30d, respectively.
Primary and secondary silhouette details extracted from the part drawing file which is held, separate to HERMS, on the CAD system data base.
Each different part has its own drawing file which is a structured set of work, spatial, engineering and technical sub-files.
The part is    initially designed in the work file, and when complete the geometric data is automatically extracted and filtered down to the spatial-file as the node, enclosing box and silhouettes.
Part 4, the pulley cheek spatial file, is shown in Figures 6.31a to 6.31d.
Control over the designing of new parts and modification of existing parts is maintained by attribute allocation and the where used file.
Attributed allocation also reduces data stored.
The retaining straps, parts 6 and 7, are similar, part 7 being made from part 6, thus part 6 becomes the base part and part 7 the made-from part.
The base part drawing file contains all the geometric information to describe the complete part, plus a security code that prevents any alteration without authorization.
The made-from part drawing file only holds details of the modification to the original, base part.
Figure 6.32 shows the drawing spatial sub-files for parts 6 and 7.
The sub-file for part 7 only contains the cut down details and new enclosing box.
A note has been entered in the technical file to explain the end of part 6 has to be cut down as illustrated.
The where used look-up file provides cross-reference information on the occurrence of individual parts and their attribute classification.
Hence the effect of any proposed change to a part can be checked by using the information in the where used file leading to the relevant assembly details.
Another attribute class used in the example is type variable, parts 9 and 10 being shown in Figure 6.33.
Variable parts consist of a base component and variable component, in this case the head and shank of a rivet, the variability being the shank length.
To view either part the variable component drawing file is accessed, which in turn regenerates the base component file to present the whole part.
Using the enclosing box excursions, interference states can be checked as described earlier.
Figure 6.34a shows the pulley cheek side (part 4) and the long rivet (part 9) silhouettes echoed into their enclosing boxes after completing a search of the data base, checking for the required interference state.
The zone of interference can now be{ ZOOMED UP}to check if the interference condition is acceptable (see Figure 6.34b).
Mechanical Functions of Performance
The Functional Design of Mechanisms
The development of a spatially related designing system has been seen to provide a basis for the understanding and evaluation of most engineering assembly problems.
In such assemblies the individual piece-parts are related simply by the geometric relationships that occur by accident or are required by design.
The relationships, as specified, are the occurrence of certain geometric arrangements within the intersection of the relating spatial domains.
Flanges in contact one with another, bolts aligning with holes, and interference between force-fit components, can all be handled by such a process.
This chapter explores the possibility of defining these assembly relationships in such ways as to provide a desired function.
The process thus advances from the spatial association of parts to include their functional association as well.
Such work immediately leads to the consideration of machines and how they operate.
A vast proportion of mechanical engineering products rely on mechanisms for their operation.
Many products contain mechanisms that are interfaced to electronics and with the advances in miniaturization of these products it is only the special-purpose machines which possess the skills to manufacture and assemble them.
However, relatively little work has been put into the development of design techniques for mechanisms, and what there has been has mostly taken the form of analysing specified mechanism trains to obtain their motion throughout the operating cycle.
Even in very large organizations one finds that the original conceptual activities were carried out initially on the drawing board, advancing to cardboard models to verify their ideas.
The difficulty that mechanism design presents is clearly seen in this process.
Whilst the specified motion of a point can be obtained on the drawing board, the successful working of the mechanism train as a whole will also depend on the geometric shapes of individual linkages and surrounding components; components cannot be allowed to clash or  be made to disassemble and re-assemble to pass through points of impossible geometry.
While there are many calculations and constructions which will allow mechanisms to be designed to pass through a set number of control points, they carry no guarantees that the mechanisms will not have to pass through infinity between some of them.
Successful mechanism design is thus seen as a marriage of spatial and functional attributes; slight changes or relaxations in one set of attributes can markedly improve the acceptability of the other.
Mechanism design has also suffered because of its synthesis approach.
There is no "black box" which can be used to provide any desired output motion from a specified input.
Experience has to be used to ascertain which class of mechanism is most likely to solve the problem.
This will depend on the variables of input motion, output motion, direction of the applied forces, the necessary accuracy and repeatability and the available space.
The chosen approach must first be geometrically explored to establish its acceptability.
This should really be conducted in a negative sense by establishing whether the approach contains any constraint boundaries which will ensure that a successful design can never be achieved.
It is pointless developing a mechanism that will always have one of its pivot points within a declared free work area or restricting the operator's view of the work in progress.
The designer must therefore achieve a "spatial feel" for his scheme at the earliest possible time.
It is at that stage in the design process that he has the greatest opportunity to explore, and the least number of constraints.
The combination of a graphics modeller with spatial and functional associativity would be likely to provide the optimum design tool.
A system of this type could be used to explore a mechanism design and allow its kinematic integrity to be established whilst the local space relationships are being monitored.
Areas of difficulty can be established and geometric details proposed and checked.
As such a design advances into greater detail, the latest additions can be checked against those inserted previously, so that throughout the development it is possible to maintain the functional and spatial requirements of the system.
A detailed kinematic understanding is thus available and this can lead on to a comprehensive dynamic and performance analysis if so desired.
Such an approach recognizes that the function of a machine is provided primarily by the correct spatial association of its constituent parts.
The result of such an association is the creation of intersection spaces between the local spaces of functioning components.
Thus, within the geometric domain of the assembly it is possible to recognize immediately those components which do not  have a functional relationship due to their spatial remoteness.
Those that lie in local spaces having intersections with other spaces will be forced to have an association, if only in terms of their need to cohabit within the same region of the geometric domain.
As was the case when component assembly was considered, it has been found necessary to identify a set of functional associations for each intersection of component spaces.
This then results in a functional domain that can be directly mapped on to the relevant geometric domain.
When two bodies attempt to exist within the same sub-space their functional association needs to be checked.
If none is declared then the association is deemed to be a "violation" if one is found, and procedures should be evoked to remove it.
When a functional association is declared it has then to be checked and maintained.
Thus, if the two components are links pinned together it is easy to see that the "pin points" declared on each model should be coincident, and this will occur within the space of intersection (whether described in terms of reference or local space parameters).
The intersections in the functional domains thus indicate the type of association that should be maintained, whilst the intersection in the geometric domain indicates the region in which it occurs.
In practice the designer works predominantly in the geometric domain and  therefore requires a procedure that can identify those intersections of space as they occur.
These should be checked for the existence of attributes in the functional domain.
If none occur in that intersection, procedures for checking on component clash are initiated.
If a form of association is declared, its spatial effect in the geometric domain must be checked and preserved.
Kinematic Modelling
Engineering is concerned with the assembly of parts that work or perform a task.
So far, much effort has gone into portraying the procedures being developed which describe and check the correct assembly of parts.
The association of local spaces can be further developed to provide a basis for the study of the motions of moving parts within a system.
The study of elements in motion, known as kinematics, recognizes that mechanisms can be investigated without any reference to the applied forces and masses of the system.
That is to say that given the input motion to the system, all other motions may be calculated and the velocities and accelerations of all points in the mechanism found.
In reality an object moves in both space and time.
The topic of dynamics is based on the concept that forces create movements which can be described as spatial changes within an all-controlling time domain.
Positions have to be re-calculated for each new increment in time.
The kinematics approach recognizes that the mechanism is constrained in such a way that only a prescribed motion is possible; a mechanism that is randomly assembled and disassembled with no known input conditions is hardly a mechanism and is impossible to analyse by any method.
The success of the kinematics approach thus depends on an ability to define the geometric arrangement of the physical system at desired positions in space.
The complete motion of a machine is described at incremental positions in space, rather than motion in time as in dynamics.
Later it will be seen that these incremental kinematic positions or "frames" can be timed and sorted to provide a time-based sequence of the complete system motion.
It is the total dependence of kinematics on the geometric model and the synthesis approach that it supports, which makes it an ideal design tool upon a computer graphics system.
During the early stages of the design, the functional arrangements of a mechanism train have to be explored whilst there is very little physical "flesh" to analyse.
Much of the preliminary work is conducted graphically by geometric construction (on board or computer) or by the  construction of physical models (in cardboard or using modelling kits).
All of these approaches consider only the primary moving centres, and the constructions represent the locus of one primary point about another.
(Similar, and perhaps simpler to understand, are the drawing-pin defined primary points on the physical models.)
The spatial modelling approach uses the local spaces to represent the physical arrangement of primary points within each component and then employs the associative procedures to establish and maintain their geometric assembly.
In order to provide the designer with such a tool that can be used during the early conceptual stage, effort has been concentrated on attempting to use an existing CAD system to synthesize the motion of mechanism trains.
The geometric capabilities of a computer-based drafting system have thus been exploited in preference to its analysis abilities.
Skeletal arrangements of mechanisms can thus be rapidly conceived, tested and modified on the system.
The relationship between all components, at set positions (or frames), can be defined and assembled to check their operation throughout a chosen event.
The kinematic information generated can then be employed, if desired, to conduct a full analysis of the proposed system.
These results can then be compared directly with any other proposed mechanism layouts.
Two possible approaches to the assembly of the components into mechanism trains have been investigated.
Both started from the concept that each component in the system is defined as a separate item within the data base, and is drawn in its own local space domain.
This part can then be positioned within another space by defining its six degrees of freedom for its rigid body motion (three of translation and three of rotation).
The first approach was to insert each component, at each frame, into a reference space and manipulate them to generate the desired assembly (shown conceptually in Figure 7.2).
The second was to allow any component to be inserted into any other space, including that of other components, and the attachments specified (see Figure 7.3).
Using this method, the "association" of components is first generated in terms of kinematic points and their positions within the frame space are then automatically accomplished.
Whilst the second approach provides a more rigorous and adaptable method of providing the assemblies, it did necessitate the building of special-purpose assembly and iterative routines into the geometric modeller of a CAD system.
This is difficult to achieve on current commercial turnkey systems.
The first approach was thus developed for use with existing systems and models, whilst the second must be used in conjunction with a hierarchical geometric modeller and CAD system.
DIRECT REFERENCE SPACE APPROACH
The procedures developed during this particular investigation have all been conducted on a Computer Vision turnkey system.
They have been written as a set of "Newvar" (a graphics language) programs which have been embedded within a number of menu key files.
These provide the user with a flexible procedure which is simply operated by positioning the tablet pen on the appropriate menu pad key.
Wherever possible, standard operating commands and geometric procedures have been incorporated.
Program Outline
The kinematics programs were designed to control two designated work areas (layer groups) within the drawing file (shown pictorially in Figure 7.4).
The first is a group on which the chosen mechanism  elements will ultimately be drawn in their correct operating positions.
Here separate layers are chosen for each interval of time or frame throughout the complete operating cycle.
These can then be viewed sequentially to establish the "movement" of the mechanism pictorially.
This group of frames thus constitutes a kinematic set of geometric domains.
A second group of layers are allocated to the movement definitions of the various component elements, to provide the functional domains.
These are stored as graphical representations of each variable for the complete event.
Each component may thus be  described by variations of its six degrees of freedom (ie three of translation and three of rotation).
This "technical" work space may also contain the graphical derivatives of any or all of the primary functions (to give all velocity and acceleration components) as well as various combined or transposed function diagrams.
The designer is thus able to generate functional data which can be used at an early design stage to evaluate dynamic performance, wear, fatigue, etc, in addition to the positional data.
The first (spatial) files are coupled to the second (function) files by an automatically generated data file.
Movements and rotations specified by the operators, which work by re-positioning the part on the viewing screen, will cause the associated data file to be updated and hence the relevant graphical function to be re-drawn (see Figure 7.5).
Conversely, the graphical functions can be re-drawn to modify  the data file and hence create the necessary movement of the part within the model space (see Figure 7.6).
The frames stored on the various spatial layers are then updated.
A third method of data entry allows the designer to insert specific coordinate and rotational values directly into the controlling data file.
Known design positions can thus be generated exactly and the remaining motion modified to the desired points.
As with the other two methods of entry, the updated file is used to re-define the graphical functions and the spatial views.
Proposed Method of Operation
The designer is able to construct and analyse any mechanism within the assembled kinematics programs.
The programs do not dictate the approach, which the designer should adapt to the problem, but will work just as well with a solution relying on the analysis of geared systems as with a solution based on cams.
They are just as effective with a system derived entirely from linkages.
Being broad-based space-handling techniques, they can be applied equally well to even a complex hybrid solution.
Whilst these techniques are still in their early stages of development, the programs are being designed to allow them to be applied in accordance with general design-office practice in the following manner.
Performance Definition
Here the proposed mechanism is fully analysed and all kinematic functions are obtained graphically, including displacements rotations and all their derivatives.
These functions may be displayed to allow the designer to inspect the kinematic performance.
Alternatively, limits may be set to particular functions and alarms triggered whenever these are exceeded.
In this manner, regions in which high accelerations occur will be flagged.
The kinematic programs allow these functions to be combined, modified, and factorized, to provide the designer with any design parameter desired.
Performance Windowing
Under this procedure the designer can set a simple design limit  (which is alarmed), and also define a complete design envelope for any chosen kinematic function to cover the complete operating cycle.
At each time frame the program will indicate all those functions which have failed to pass through the "design window" set for that part of the cycle.
By this process "critical" windows can be set in regions where precision is required and open tolerances set for others.
The designer is thus presented with information on the type of "failure" , its value, and where it occurred during the mechanism event.
Modifications can then be investigated.
Performance Comparison
The performance curves obtained for a new scheme can be compared directly against an ideal set or those found for a previous design.
Any set of functions can be overplotted on to the reference set, or an error function may be generated and plotted directly.
Performance Uncertainty
Each design can be modified by the manufacturing and assembly tolerances of the component parts in order to establish the extremes of the physical envelope.
Slop, arising from the assembly of components in their minimum metal condition or due to an estimated wear pattern, can be included to produce positional uncertainty in the mechanism, which can then be compared to the positional requirements necessary for correct operation.
These procedures allow the designer to develop and compare mechanism designs on a computer-based system.
Alternative arrangements can be developed and their performances assessed, and areas of possible problems can be identified and alleviated at an early stage of the design.
The complete mechanism design can thus be developed with greater confidence â€” not only are all the performance functions available but the mechanism can be "run" (by cycling layers) so as to observe it throughout its complete operating cycle.
Procedural Example
The operation of the kinematics package can be illustrated by reference to the analysis of an existing mechanism train.
The chosen mechanism is that of the needle driving system employed in an industrial sewing machine.
It is first necessary to establish the primary dimensions and layout by measuring a standard machine (see Figure 7.7 for a preliminary sketch).
The mechanism is assumed to start at the rotation of the cam shaft A. This is seen to be connected to the sewing machine main drive system by a dog coupling at its lower end.
The other end   carries an offset circular cam of spherical cross-section which generates semi-cycloidic motion in the connecting rod and yoke assembly (part B).
This cam is in turn pinned to the upper arm of the bell crank C. The resulting rotation of the crank about its fixed pivot causes the horizontal portion to rise and fall, lifting link member D and with it the vertically constrained rod member E. The needle carried in a collet at the lower end is thus made to oscillate vertically.
Component Parts
Each element of the system was first drawn in a separate drawing file, within a set of working layers (0 to 99).
These were then filed away under part names, chosen as PARTA to PARTE these are shown in Figures 7.8 and 7.9.
As each component was later to be assembled into the complete working mechanism, care was taken in laying out the details in order to reduce the manipulation that is necessary at a later stage.
During assembly, components are first "hooked" to the last known element in the train and then rotated.
If the zero reference point is arranged to be at that assembly point then the assembly procedures are eased.
Also, if the components are all drawn in their normal working attitude in the machine space, additional rotations will not be necessary.
Neither of these two previous statements implies a restriction on how the drawing can be laid out but rather indicates a   preferred order to simplify the mental visualization necessary for the designer.
Components can and have been handled where the drawing reference and attitude bear no relationship to the kinematic motion.
These are simply handled by imposing initial "offset" freedoms to any defined movement.
The designer must in this case provide the six displacement and rotation vectors to transform the model from its drawn space, into the reference for the component within the complete machine.
When this is simply the horizontal movement of the part across the screen the operator can usually cope, but when the movement is a translation in three dimensions and a compound rotation, the possibilities for error become enormous.
As it is necessary during the assembly of certain components (such as links) to rotate them about their assembly points so they can mate with other constrained linkages, the original component drawing should also carry suitable construction arcs struck from the assembly point and passing through the linkage pin point.
The isometric view of PARTA shows that two arcs have been struck from the yoke centre to pass through the connecting rod "small end" centre (one lying in the vertical plane, the other in the horizontal).
These are necessary as the part must finally rotate in both of those planes to maintain its pin centre coincident with that of the arc, described by the constrained rotation of the upper pin centre on PARTC.
Data Files
The files necessary to control the movements of the parts between each frame must also be set up.
Once an appropriate file name has been defined the file is automatically structured.
The files must in this case be named after the individual piece parts, ie PARTA to PARTE.
These all contain setting-up data, six possible initial offset values, and a group of freedoms for each frame of the event.
In this study 12 equal-time increments were chosen to represent the complete operating cycle.
Input Drive Motion
The motion of this portion of the sewing machine is dictated by the  constant angular velocity, which is considered to occur at the drive shaft A. In the kinematics program this motion is represented by the construction of a graph for the rotation of this component (AZ-rotation).
The graph is automatically constructed with 12 equal horizontal frame increments and is chosen to display a vertical scale ranging from 0 to 360 degrees.
From the tablet a graphics program is called which allows the operator to insert chosen values on to the displayed graph axis.
The digitizing pen is used to define a zero angle on frame 1 and 330 degrees on frame 12, and then the program automatically inserts all intervening points on a straight line passing through these extremes.
The resultant function diagram constructed for this rotation is shown in Figure 7.10.
The drive shaft assembly PARTA can then be inserted into a convenient working drawing to allow the 12 increments of rotation to be observed (see Figure 7.11).
Motion of Connecting Rod and Yoke
PARTB is seen to translate in two planes (as its origin is at the centre of the yoke) and also rotate in two.
Within the model coordinate system these are defined as variations in X, Z, AY and AZ.
The displacement values are given by the two corresponding coordinate variations generated by the rotation of the circular cam   on PARTA.
In model space, these are also given as variations in X and Z.
The displacements are found by selecting a plan view of PARTA and zooming in to observe only the full rotation of the cam centre about the axis of the shaft.
The 12 points may be identified and copied to an adjoining layer (to aid clarity) or operated directly in the original view.
Graphs are thus constructed for both X and Z and filed in association with PARTB.
This time, however, data is entered on to the graphs by first indicating each point in turn (on the plan view of PARTA) by means of a digitized point.
Displacements in X and then in Z are automatically calculated from an identified origin by the controlling program.
These are first entered into a data file and then displayed on the relevant function diagram, and a graph is generated by straight lining between these points.
The two displacement functions are shown on the left in Figure 7. 12.
Next, the selected frames of movement for PARTB are drawn into a temporary drawing file using the now established displacement functions.
This results in the correct motion at the yoke end with parallel motion of the connecting rod with its construction axis.
In real life the assembly must rotate about the AY and AZ axis in order that the small end coupling aligns with the centre of the crank, PARTC.
A spatial data program called from the tablet allows these angular changes to be identified for each frame by generating three digitized points which give the origin and the existing link point and its desired new position.
The angles thus calculated for all frames are then used to produce the two rotational functions shown on the right of Figure 7.12.
These four function diagrams now completely define the motion of PARTB, as shown by two representative frames in Figure 7.13.
Bell Crank Rotations
A zoomed front view of the small end of PARTB shows the necessary movement of the pin point across the arc described about the centre of the bell crank.
The alignment points for each frame are identified and, if desired, are copied to an adjoining layer.
These positions can then be employed to calculate the angle of crank rotation necessary for correct assembly at each frame.
Again, a graphical function is generated and inserted on to an appropriately scaled graph.
While this part is constrained to produce only rotary motion in one plane, it may be necessary to provide additional offset functions (in the X and Y directions) to allow it to be drawn about a sensible (local) origin.
The single graphical function controlling its motion is shown in Figure 7.14, together with a front view of the crank in selected positions throughout its cycle.
Link Member Movement
This member is identified as having to move in both the X and Y directions in order to remain in contact with the pin on the horizontal arm of the bell cranks, and also to rotate so that its other end is maintained on the vertical line which describes the allowable movement of the rod member.
Again, the translation function is generated by identifying both movements at the appropriate pin point on the crank PARTC.
The construction of the directly translated motion of the piece-part cycle allows the necessary rotation function to be identified and constructed.
The three functions controlling the motion of PARTD are shown, with a front view of its extremes of movement, in Figure 7.15.
Resulting Needle Rod Movement
The needle rod is constrained to provide only motion in the vertical direction.
This function must be identical to the vertical movement of the lower connecting point of the link member, PARTD.
The motion of this point is therefore employed in the construction of   the appropriate function diagram.
The resulting needle movement and graphical function in Y are shown in Figure 7.16.
Component Assembly
The individual piece-parts can be drawn on to separate layers of a working drawing in order that their movement can be visualized  from any number of positions and orientations.
More than one part can be entered into that working drawing in order to display the interaction of assembled parts or those which may have a tendency to clash.
Figures 7.17 to 7.23 show various recorded frames for different sub-assemblies of parts.
Ultimately, all the components can be assembled on various "framing" layers in the drawing space.
These can then be cycled by a tablet-called routine to allow the mechanism to be observed increment throughout its full event.
Although the framing rate is slow, a feel can be obtained for the mechanism movement if the frames are allowed to run through a number of cycles.
Figure 7.24 shows two frames out of the complete event, while Figure 7.25 shows a close-up of one such frame.
Further design checks can be performed by inserting details of other parts, or of the main machine body, into other layers of the working drawing file.
These can then be displayed with each frame to establish whether clashes occur.
Compound Function Diagrams
During the mechanism definition stage all functions are drawn    graphically against a horizontal axis of frame numbers.
When mechanisms are being compared it is often more meaningful to obtain the response function for the complete system or for part of the system.
The mechanism is then considered to be simply a black box function generator.
An input/output response is thus required.
A tablet-initiated program allows any two functions to be compared graphically.
Figure 7.26 shows the input/output diagram for the complete mechanism train under consideration.
The vertical axis shows the vertical position of the needle for any given  rotational angle of the input shaft A. Any number of comparative functions can be generated in order to satisfy the design requirements.
Associated Space and Attachment Approach
Whilst the modelling procedures for the handling of associated spaces and attachments are still the subject of research, the principles can be outlined as follows.
The definition of a component within its own local space, with discrete attachments to other spaces, is seen firstly to conform to observations of the real world.
In kinematics the coupling of components is usually described in terms of Reuleaux pairs which attempt to describe the allowable motions between parts.
Groups whose motion is curtailed by the maintenance of point or line contact at the bearing surfaces, are sub-divided into higher and lower pairs, respectively.
A shaft or bearing may thus simply be described as a rotary lower pair although its detailed motion may be far from simple.
This implies that its motion may be systematically reduced to result in only one degree of freedom.
If the coordinate system is set along the axis of the shaft, only one rotational freedom is seen to be allowable.
This is obviously a simplification of the real world problem in which the designer may no longer be worried about the gross rotational movements obtainable, but be interested in the effects of bearing tolerance.
All six degrees of freedom are seen to take on some zone of possible position or angle.
Some may be considered very small or insignificant in comparison to others, but all must be considered to exist.
The standard kinematic definitions, by taking a simplified approach, creates difficulties when combinations or sequential parts are considered.
For example, if the longitudinal position of the bearing is obtained by a pin inserted into the shaft and a slot is provided in the bearing, to allow for assembly (as in Figure 7.27), then sequential pairs are constructed.
The proposed assembly will allow only simple rotation (ie a revolute pair), while the pin is not aligned with the slot.
Once the pin does align with the slot, the mechanism can be transformed to provide only linear motion (ie a prismatic pair).
A mechanism must thus be provided whereby one set of pairs can modify or suddenly change into another.
Also, the secondary movements within the system, caused by wear, slop, tolerance, etc should be capable of being included.
The procedure adopted has been to allow all models to have six degrees of freedom with respect to their adjoining member.
This effectively results in the secondary model being inserted into the   model space of the former.
Movement of the higher space will thus result in equivalent movements of all inserted models.
These models, in their turn, can be adjusted in angle and position with respect to the higher space.
ASSOCIATIVE MODELLING
In order to overcome the problems of a mechanism becoming inadvertently disassembled by component changes, the development of an automated associative procedure was considered.
This was developed and coupled to an experimental hierarchical modeller.
Here, each component is established within its own local space, allowing modifications and additions to be made to each model independently.
The program procedures then allow each component to be positioned within any other space according to nine controlling freedoms (the six normal kinematic freedoms and three  additional values of orthogonal scale).
With this modeller it is possible to construct an object by assembling and modifying many separate models.
These may be scaled or distorted primitive three-dimensional shapes (cylinders, blocks, wedges, etc).
They may be individually constructed features which are inserted singularly or multiply.
Each assembly of models may itself be stored away as yet another model of a higher order.
The addition of an associative procedure to this modeller was thus seen to provide the Possibility of a truly automated kinematic assembly process.
REFERENCE SPACE ATTACHMENTS
As a first stage in the development of a general associative procedure an investigation was made into automatically attaching models (to one another), by the declaration of attachment nodes.
This associative procedure is achieved by first stating the model to be attached and then indicating which of its nodes have to be positioned upon another specified node (on another model).
After any manipulation of the models, the associative routines are evoked which check the integrity of the assembly.
If the changes have caused a disassociation to take place, the program automatically reassembles the mechanism.
In this procedure each model is entered into the reference space and separately connected to its attachment node.
Figure 7.28 shows, in an isometric view, two links lying in the horizontal plane.
The model is attached to a node at the origins of the reference space, with the second attached to a point set on the first.
The rotation of the first model is, by its attachment, forced to take place about the   origin.
If a translation is directly imposed on the model, or occurs as a result of the rotation not taking place about the attachment point, the program completes the rotation and then re-positions the model back on to the point of association.
The integrity of the first link is thus preserved, and its resulting rotation produces a corresponding translation of the attachment point to the second link.
The procedures thus impose a set of translations on this model to re-establish the specified state of association.
The resulting assembly configurations for a given set of rotations on link I are shown in Figure 7.29.
Here the attitude of the second  model within the reference space is preserved.
Movement of the system thus results in a number of parallel images being produced for the second model at each event.
Each model is thus seen to be independently inserted into the reference space and then attached to each other.
HIERARCHICAL SPACE ATTACHMENTS
As an alternative assembly procedure, it is not only possible to attach one model to another but also to declare that this model is inserted into the model space of the other.
This approach results in the freedom values of the primary model also being imposed on the inserted model.
The effect of this constraint on the relationship between the models in Figure 7.29 results in the same rotations imposed on model I also being imposed on model 2.
Again the procedure  checks (and if necessary adjusts) the models to preserve the associations.
This then results in a re-assembly of the mechanism as shown in Figure 7.30.
The angle between the models is in this case preserved, indicating that they have been operated on as if they were a single model rotating about the origin.
SECONDARY GROUND POINTS
In order to produce a realistic model of a mechanism, it is often necessary to produce an association which further constrains the output motion.
The previous model, if its end point is associated with a third linkage, which is itself grounded, will produce the classic four-bar chain mechanism.
The motion of the second (coupler) link is thus not seen to be represented by either of the two previous attachment procedures.
With the secondary grounded model the procedure is initially set to translate all components into association so as to re-establish the integrity of the system.
The error between the end point of the assembly and its desired ground point position is then calculated.
In order to be able to cope with non-linear and complex assemblies (such as cams, sliders, etc), it was decided to adopt an iterative approach to the assembly rather than apply, in this case, the simpler trigonometric relationships.
This procedure starts realigning the mechanism by systematically working down the mechanism, reducing the angular error on each occasion.
This process is repeated until the end error is reduced below a specified value.
Whilst this process may, for this model, take up to 20 iterations to  achieve an acceptable assembly from a disjointed starting point, once an association has been accomplished for the first time and, if only small disturbances are imposed, re-association may be accomplished in as few as three attempts.
Figure 7.31 shows this mechanism now assembled as a four-bar chain, with its linkages re-established for a number of set angular positions of the first linkage.
The mechanism can thus be "driven" through its operating cycle to establish whether it operates correctly.
If an arrangement is chosen that cannot physically pass through its end positions without breaking the couple, then the iterative procedure will state, after a set number of attempts, that it is unable to re-establish the associations in this configuration.
The designer is provided, therefore, with an early indication of the mechanism's failure to meet with the specified operating conditions.
COMPARISON OF TURNKEY AND ASSOCIATIVE STUDIES
In order to provide a direct comparison between the programs developed for the turnkey system and those for the associative modeller, the same mechanism was analysed on each.
Figure 7.32   shows the basic geometry of a sack-handling mechanism.
In this the left-hand arm is positioned by a jack and the right-hand arm set by the coupling linkage.
The arrangement causes the two arms to open and close together.
An isometric view of the system is included in Figure 7.33.
Analysis on a turnkey system was performed by first establishing the two functions describing the rotation of the left-hand arm and the jack.
Second, the known state of the left-hand arm was used to provide the two translational functions describing the motion of the   left-hand end of the coupler rod.
These translation states of the coupler were then rotated to align with an arc set through the right-hand arm coupling point.
From these assembly points the rotational function of the remaining linkages were established and reproduced in graphical form.
The six graphs describing the freedoms of the complete system were then available (see Figure 7.34) and used to produce the incremental assemblies shown in Figure 7.35.
Within the associative modeller it was necessary to define the three separate models representing the left-hand arm, right-hand arm and the coupler rod (the jack was not included).
Two attachment points were defined in the reference space, upon which the two main arms were positioned.
Two more, for aligning these arms were also specified as existing at the end of the coupler rod.
The mechanism was then automatically assembled to conform with   these associations (as was done to achieve Figures 7.34 and 7.35).
Movements imposed on the left-hand arm thus forced the remaining members to re-configure their angular positions in order to maintain those relationships.
The resulting mechanism movements over a number of sequential increments in angle are shown in Figure 7.36.
Systems with Unconstrained Rotational Motion
A link (B in Figure 7.37), attached to another (A) which is itself grounded, can at its free end describe any point within its circles of reach on a two-dimensional plane.
If this arm was free to move about upon that plane, its position and attitude would be fully  described by two translational and one rotational freedoms.
Once attached to the grounded link, the two translational freedoms are restricted to comply with the vertical and horizontal components derived from the motion of the attachment point moving about its fixed centre.
Only the rotational freedom remains unconstrained.
The two procedures are seen to attempt to handle the result of an imposed change of mechanism state in different ways.
If it is necessary to rotate arm A by, say, 450 clockwise from its current position, then the position and attitude of B will be affected.
When the direct insertion approach is used, the state of B is simply controlled by its three freedom values within the reference space.
Of these, the two translations are modified by the movement of the attachment point from P1 to P2.
No change in the rotational state is indicated, so the procedure results in only a translational motion as shown in Figure 7.38.
In the procedure of associated spaces, however, link B is seen computationally as only a special entity in the reference space, containing all the entities describing link A. Rotation of A by 450 is achieved by rotating the entire sub-model space.
This results in the association between the links being preserved (ie as translation or   rotation between them), but also in link B being both translated and rotated with respect to the reference space (see Figure 7.38B).
Systems with Constrained Rotations
If, as previously shown, the free end of this two-link system is attached to a third member (C in Figure 7.39) which is also grounded, the mechanism takes on the form of a four bar chain.
The end point of the two-link system (Q) is therefore constrained to describe a circle about the ground point of the third member, C. The rotational freedoms of ail three links are restrained and provided as a unique set of relationships dependent on one another.
Here, the two procedures provide different approaches to any mechanism attitude change, and this results in quite different techniques being applied in order to preserve the integrity of the assembly.
The procedure for direct insertion into the reference space will see any change in the position of link A as affecting the translations only of the connecting point P (see Figure 7.40).
So, the correction procedure for mechanism integrity initially translates the link B to preserve its relationship with the attachment point P. Links B and C are thus detached (being at Q"and Q, respectively), and are reassembled by the inclusion of additional rotations on both links to establish a new connecting point at Q2.
The procedure of associated space requires that all elements within a chosen space comply to the modification imposed upon  that space.
The rotation of link A is again achieved by the rotation of the sub-space containing all links.
The end link is thus detached from its ground point R and rotated to position R1 (see Figure 7.40).
Re-assembly is this time achieved by the rotation of link C, in its space, until the new end point R2 is the identical distance from P as is R. The sub-space containing both B and C is then rotated about P to bring R2 back to R. 
Systems with Multiple Positional and Rotational States
Many industrial mechanisms will result in a geometric arrangement in which the required final positioning or output can be achieved by many different states of the mechanism.
For example, a three-link articulated arm (shown in Figure 7.41) can achieve the desired end position (R) with the links in many different positions and attitudes.
A unique solution to a request for change in position is thus not achievable without imposing other problem constraints.
This may be in the form of a restricted zone in which the linkage may not lie, a   definition of the order in which positional modifications can take place, or of restrictions on the local or global energy changes that can take place.
It is under these conditions that the two approaches are seen to provide their own distinct advantages.
When the arrangement of the mechanism is straightforward and the constraints imposed are only those of required or forbidden spatial position, the direct insertion approach is the easiest to apply.
The CAD operator has at his disposal a range of commands which will allow him to reposition all elements of the mechanism within the reference space.
By using arcs struck about the assembly points and passing through the other attachment points on the intermediate link, the member may be Positioned initially to a chosen point on the locus of point P (see Figure 7.42) and then rotated to generate  an attachment point on the locus of point Q (link C).
In this manner many alternative configurations can be rapidly explored by the operation and the most suitable chosen for more detailed study.
The associated space approach is made easy to handle on a semi-automated  basis (while the direct insertion is essentially an interactive process).
When complex interaction, of a defined nature, is to be expected, it is preferable to construct an iterative procedure which will automatically reestablish the integrity for the mechanism at the end of each move or disturbance.
Should, for instance, link B need to be re-positioned (due to , say, an object entering its model space), then an iterative procedure can be implemented in order to maintain the end of link C on reference point R.
In this, one of the spaces would be chosen and rotated in order to clear the elements adequately from the offending object (in Figure 7.43 the space containing links B and C has been rotated).
The program works down the hierarchical spaces, rotating them to achieve a zero rotational error in each sub-space between the actual end of the mechanism and the reference point.
If, on reaching the   lowest level, the points have not been re-aligned positively, with a set tolerance, the procedure returns to the highest level and successively provides a rotational correction down through the system again.
This is repeated, with a clash detection check, until the desired accuracy of realignment is achieved.